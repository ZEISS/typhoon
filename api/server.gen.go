// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"fmt"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all managed systems.
	// (GET /systems)
	ListSystems(c *fiber.Ctx) error
	// List all managed systems.
	// (GET /systems/{systemId})
	ShowSystem(c *fiber.Ctx, systemId string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// ListSystems operation middleware
func (siw *ServerInterfaceWrapper) ListSystems(c *fiber.Ctx) error {

	c.Context().SetUserValue(Bearer_authScopes, []string{})

	return siw.Handler.ListSystems(c)
}

// ShowSystem operation middleware
func (siw *ServerInterfaceWrapper) ShowSystem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "systemId" -------------
	var systemId string

	err = runtime.BindStyledParameterWithOptions("simple", "systemId", c.Params("systemId"), &systemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter systemId: %w", err).Error())
	}

	c.Context().SetUserValue(Bearer_authScopes, []string{})

	return siw.Handler.ShowSystem(c, systemId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/systems", wrapper.ListSystems)

	router.Get(options.BaseURL+"/systems/:systemId", wrapper.ShowSystem)

}
