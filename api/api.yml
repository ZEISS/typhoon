openapi: 3.1.0

info:
  version: 1.0.0
  title: Typhoon API
  description: |
    # Introduction

    Typhoon is an event bridge for applications and services.
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"

servers:
  - url: http://localhost:8080/api/v1
    description: Development server

tags:
  - name: System
    description: |-
      These are the system managed by Typhoon.
  - name: Team
    description: |-
      These are the teams that are using Typhoon.
  - name: Triggers
    description: |-
      These are the triggers that are used to send events to Typhoon.

consumes:
  - "application/json"
produces:
  - "application/json"
schemes:
  #- "https"
  - "http"

paths:
  /version:
    get:
      summary: Returns the current version of the API.
      operationId: version
      tags:
        - Server
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"

  /operators:
    get:
      summary: List all operators
      operationId: listOperator
      tags:
        - Operator
      produces:
        - "application/json"
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      security:
        - bearerAuth: ["read:operators"]
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResult"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Operator"
    post:
      summary: Creates a new operator
      operationId: createOperator
      tags:
        - Operator
      produces:
        - "application/json"
      requestBody:
        $ref: "#/components/requestBodies/CreateOperator"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operator"
      links:
        GetOperatorById:
          operationId: getOperator
          parameters:
            operatorId: "$response.body#/id"

  /operators/{operatorId}:
    get:
      summary: Gets an operator by ID
      operationId: getOperator
      parameters:
        - $ref: "#/components/parameters/operatorId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operator"
    put:
      summary: Updates an operator by ID
      operationId: updateOperator
      parameters:
        - $ref: "#/components/parameters/operatorId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Operator"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operator"
    delete:
      summary: Deletes an operator by ID
      operationId: deleteOperator
      parameters:
        - $ref: "#/components/parameters/operatorId"
      responses:
        "204":
          description: Successful

  /operators/{operatorId}/token:
    get:
      summary: Gets a token for an operator
      operationId: getOperatorToken
      parameters:
        - $ref: "#/components/parameters/operatorId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWTToken"
    put:
      summary: Updates a token for an operator
      operationId: updateOperatorToken
      parameters:
        - $ref: "#/components/parameters/operatorId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWTToken"
    delete:
      summary: Deletes a token for an operator
      operationId: deleteOperatorToken
      parameters:
        - $ref: "#/components/parameters/operatorId"
      responses:
        "204":
          description: Successful

  /operators/{operatorId}/signing-keys:
    get:
      summary: List all signing keys for an operator
      operationId: listOperatorSigningKeys
      tags:
        - Operator
      produces:
        - "application/json"
      parameters:
        - $ref: "#/components/parameters/operatorId"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      security:
        - bearerAuth: ["read:signing-keys"]
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResult"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/KeyPair"
      links:
        GetSigningKeyById:
          operationId: getSigningKey
          parameters:
            operatorId: "$response.body#/operatorId"
            signingKeyId: "$response.body#/id"

  /operators/{operatorId}/accounts:
    get:
      summary: List all accounts for an operator
      operationId: listOperatorAccounts
      tags:
        - Operator
      produces:
        - "application/json"
      parameters:
        - $ref: "#/components/parameters/operatorId"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      security:
        - bearerAuth: ["read:accounts"]
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResult"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Account"
    post:
      summary: Creates a new account
      operationId: createOperatorAccount
      tags:
        - Operator
      produces:
        - "application/json"
      parameters:
        - $ref: "#/components/parameters/operatorId"
      requestBody:
        $ref: "#/components/requestBodies/CreateAccount"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"

  /operators/{operatorId}/accounts/{accountId}:
    get:
      summary: Gets an account by ID
      operationId: getOperatorAccount
      parameters:
        - $ref: "#/components/parameters/operatorId"
        - $ref: "#/components/parameters/accountId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"

    put:
      summary: Updates an account by ID
      operationId: updateOperatorAccount
      parameters:
        - $ref: "#/components/parameters/operatorId"
        - $ref: "#/components/parameters/accountId"
      requestBody:
        $ref: "#/components/requestBodies/UpdateAccount"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"

    delete:
      summary: Deletes an account by ID
      operationId: deleteOperatorAccount
      parameters:
        - $ref: "#/components/parameters/operatorId"
        - $ref: "#/components/parameters/accountId"
      responses:
        "204":
          description: Successful

  /operators/{operatorId}/accounts/{accountId}/signing-keys:
    get:
      summary: List all signing keys for an account
      operationId: listOperatorAccountSigningKeys
      tags:
        - Operator
      produces:
        - "application/json"
      parameters:
        - $ref: "#/components/parameters/operatorId"
        - $ref: "#/components/parameters/accountId"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      security:
        - bearerAuth: ["read:signing-keys"]
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResult"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/KeyPair"

  /operators/{operatorId}/accounts/{accountId}/token:
    get:
      summary: Gets a token for an account
      operationId: getOperatorAccountToken
      parameters:
        - $ref: "#/components/parameters/operatorId"
        - $ref: "#/components/parameters/accountId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWTToken"
    delete:
      summary: Deletes a token for an account
      operationId: deleteOperatorAccountToken
      parameters:
        - $ref: "#/components/parameters/operatorId"
        - $ref: "#/components/parameters/accountId"
      responses:
        "204":
          description: Successful

  /operators/{operatorId}/accounts/{accountId}/users:
    get:
      summary: List all users for an account
      operationId: listOperatorAccountUsers
      tags:
        - Operator
      produces:
        - "application/json"
      parameters:
        - $ref: "#/components/parameters/operatorId"
        - $ref: "#/components/parameters/accountId"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      security:
        - bearerAuth: ["read:users"]
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResult"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
    post:
      summary: Creates a new user
      operationId: createOperatorAccountUser
      tags:
        - Operator
      produces:
        - "application/json"
      parameters:
        - $ref: "#/components/parameters/operatorId"
        - $ref: "#/components/parameters/accountId"
      requestBody:
        $ref: "#/components/requestBodies/CreateOperatorAccountUser"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      links:
        GetUserById:
          operationId: getOperatorAccountUser
          parameters:
            operatorId: "$response.body#/operatorId"
            accountId: "$response.body#/accountId"
            userId: "$response.body#/id"

  /operators/{operatorId}/accounts/{accountId}/users/{userId}:
    get:
      summary: Gets a user by ID
      operationId: getOperatorAccountUser
      parameters:
        - $ref: "#/components/parameters/operatorId"
        - $ref: "#/components/parameters/accountId"
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /operators/{operatorId}/accounts/{accountId}/users/{userId}/token:
    get:
      summary: Gets a token for a user
      operationId: getOperatorAccountUserToken
      parameters:
        - $ref: "#/components/parameters/operatorId"
        - $ref: "#/components/parameters/accountId"
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWTToken"

  /operators/{operatorId}/accounts/{accountId}/users/{userId}/credentials:
    get:
      summary: Gets the credentials for a user
      operationId: getOperatorAccountUserCredentials
      parameters:
        - $ref: "#/components/parameters/operatorId"
        - $ref: "#/components/parameters/accountId"
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: Successful
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/Credentials"
  /teams:
    get:
      summary: List all teams
      operationId: listTeams
      tags:
        - Team
      produces:
        - "application/json"
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      security:
        - bearerAuth: ["read:teams"]
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResult"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Team"

    post:
      summary: Creates a new team
      operationId: createTeam
      tags:
        - Team
      produces:
        - "application/json"
      requestBody:
        $ref: "#/components/requestBodies/CreateTeam"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
      links:
        GetTeamById:
          operationId: getTeam
          parameters:
            teamId: "$response.body#/id"

  /teams/{teamId}:
    get:
      summary: Gets a team by ID
      operationId: getTeam
      parameters:
        - $ref: "#/components/parameters/teamId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"

  /teams/{teamId}/accounts:
    get:
      summary: List all accounts for a team
      operationId: listTeamAccounts
      tags:
        - Team
      produces:
        - "application/json"
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      security:
        - bearerAuth: ["read:accounts"]
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResult"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Account"

  /teams/{teamId}/accounts/{accountId}:
    get:
      summary: Gets an account by ID
      operationId: getAccount
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"

  /teams/{teamId}/accounts/{accountId}/groups:
    get:
      summary: List all signing key groups for an account
      operationId: listGroups
      tags:
        - Team
      produces:
        - "application/json"
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/accountId"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      security:
        - bearerAuth: ["read:groups"]
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResult"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/SigningKeyGroup"
    post:
      summary: Creates a new signing key group
      operationId: createGroup
      tags:
        - Team
      produces:
        - "application/json"
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/accountId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SigningKeyGroup"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SigningKeyGroup"
      links:
        GetGroupById:
          operationId: getGroup
          parameters:
            teamId: "$response.body#/teamId"
            accountId: "$response.body#/accountId"
            groupId: "$response.body#/id"

  /teams/{teamId}/accounts/{accountId}/groups/{groupId}:
    get:
      summary: Gets a signing key group by ID
      operationId: getGroup
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/accountId"
        - $ref: "#/components/parameters/groupId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SigningKeyGroup"
    put:
      summary: Updates a signing key group by ID
      operationId: updateGroup
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/accountId"
        - $ref: "#/components/parameters/groupId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SigningKeyGroup"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SigningKeyGroup"
    deleted:
      summary: Deletes a signing key group by ID
      operationId: deleteGroup
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/accountId"
        - $ref: "#/components/parameters/groupId"
      responses:
        "204":
          description: Successful

  /teams/{teamId}/accounts/{accountId}/users:
    get:
      summary: List all users for an account
      operationId: listUsers
      tags:
        - Team
      produces:
        - "application/json"
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/accountId"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      security:
        - bearerAuth: ["read:users"]
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResult"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
    post:
      summary: Creates a new user
      operationId: createUser
      tags:
        - Team
      produces:
        - "application/json"
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/accountId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      links:
        GetUserById:
          operationId: getUser
          parameters:
            teamId: "$response.body#/teamId"
            accountId: "$response.body#/accountId"
            userId: "$response.body#/id"

  /teams/{teamId}/accounts/{accountId}/users/{userId}:
    get:
      summary: Gets a user by ID
      operationId: getUser
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/accountId"
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      summary: Updates a user by ID
      operationId: updateUser
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/accountId"
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    deleted:
      summary: Deletes a user by ID
      operationId: deleteUser
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/accountId"
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Successful

  /systems:
    get:
      summary: List all managed systems.
      operationId: listSystems
      tags:
        - System
      description: |-
        Returns a list of managed systems.
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResult"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/System"
    post:
      summary: Creates a new system
      operationId: createSystem
      tags:
        - System
      produces:
        - "application/json"
      requestBody:
        $ref: "#/components/requestBodies/CreateSystem"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/System"
      links:
        GetSystemById:
          operationId: getSystem
          parameters:
            systemId: "$response.body#/id"

  /systems/{systemId}:
    get:
      summary: Gets a system by ID
      operationId: getSystem
      parameters:
        - $ref: "#/components/parameters/systemId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/System"
    put:
      summary: Updates a system by ID
      operationId: updateSystem
      parameters:
        - $ref: "#/components/parameters/systemId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/System"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/System"

    delete:
      summary: Deletes a system by ID
      operationId: deleteSystem
      parameters:
        - $ref: "#/components/parameters/systemId"
      responses:
        "204":
          description: Successful

  /systems/{systemId}/operator:
    get:
      summary: Gets the operator for a system
      operationId: getSystemOperator
      parameters:
        - $ref: "#/components/parameters/systemId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operator"
    put:
      summary: Updates the operator for a system
      operationId: updateSystemOperator
      parameters:
        - $ref: "#/components/parameters/systemId"
      requestBody:
        $ref: "#/components/requestBodies/UpdateSystemOperator"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operator"
    delete:
      summary: Deletes the operator for a system
      operationId: deleteSystemOperator
      parameters:
        - $ref: "#/components/parameters/systemId"
      responses:
        "204":
          description: Successful

definitions:
  schemas:
    createTeamResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string

components:
  parameters:
    systemId:
      in: path
      name: systemId
      required: true
      schema:
        type: string
        format: uuid
      description: The id of the system to retrieve.
    teamId:
      in: path
      name: teamId
      required: true
      schema:
        type: string
        format: uuid
      description: The id of the team to retrieve.
    groupId:
      in: path
      name: groupId
      required: true
      schema:
        type: string
        format: uuid
      description: The id of the group to retrieve.
    accountId:
      in: path
      name: accountId
      required: true
      schema:
        type: string
        format: uuid
      description: The id of the account to retrieve.
    userId:
      in: path
      name: userId
      required: true
      schema:
        type: string
        format: uuid
      description: The id of the user to retrieve.
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
      description: The number of items to skip before starting to collect the result set.
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: The numbers of items to return.
    operatorId:
      in: path
      name: operatorId
      required: true
      schema:
        type: string
        format: uuid
      description: The id of the operator to retrieve.

  requestBodies:
    CreateSystem:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              description:
                type: string
    UpdateSystemOperator:
      content:
        application/json:
          schema:
            type: object
            required:
              - operatorId
            properties:
              operatorId:
                type: string
                format: uuid
    CreateTeam:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Team"
    CreateOperator:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              description:
                type: string
              contactEmail:
                type: string
    CreateAccount:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              description:
                type: string

    # Body for updating an account
    UpdateAccount:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              description:
                type: string
              claims:
                $ref: "#/components/schemas/JWTAccountClaims"

    CreateOperatorAccountUser:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              email:
                type: string

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    api_key:
      in: header
      name: api_key
      type: apiKey

  schemas:
    NKey:
      description: |
        An NKey is the private key of a NATS account.
      type: string
      format: base32

    JWTToken:
      description: |
        A JWT token is a JSON Web Token.
      type: string
      format: JWT

    KeyPair:
      descriptio: |
        A KeyPair is a public/private key pair.
      required:
        - publicKey
      type: object
      properties:
        publicKey:
          type: string
          format: base32
        privateKey:
          type: string
          format: base32

    Credentials:
      type: string
      format: binary

    PaginatedResult:
      type: object
      properties:
        total:
          type: number
        offset:
          type: number
        limit:
          type: number
        results:
          type: array
          items:

    System:
      type: object
      required:
        - name
        - cluster
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          description: Name of the system
          example: "eu-west-1"
        description:
          type: string
          description: A description of the system.
        operator:
          $ref: "#/components/schemas/Operator"
        cluster:
          $ref: "#/components/schemas/Cluster"
        createdAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        deletedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"

    Operator:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        key:
          $ref: "#/components/schemas/KeyPair"
        signingKeys:
          type: array
          items:
            $ref: "#/components/schemas/KeyPair"
        description:
          type: string
        contactEmail:
          type: string
        createdAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        deletedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"

    Team:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        description:
          type: string
        contactEmail:
          type: string
        createdAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        deletedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"

    Cluster:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        url:
          type: string

    Account:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        description:
          type: string
        contactEmail:
          type: string
        key:
          $ref: "#/components/schemas/KeyPair"
        signingKeys:
          type: array
          items:
            $ref: "#/components/schemas/KeyPair"
        createdAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        deletedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"

    SigningKeyGroup:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        description:
          type: string
        scope:
          $ref: "#/components/schemas/SigningKeyGroupScope"
        is_scoped:
          type: boolean
          default: false
        disabled:
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        deletedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"

    SigningKeyGroupScope:
      type: object
      properties:
        publish:
          $ref: "#/components/schemas/SigningKeyGroupScopePublish"
        subscribe:
          $ref: "#/components/schemas/SigningKeyGroupScopeSubscribe"
        subscriptions:
          type: integer
          default: 0
        payload:
          type: integer
          default: 0
        data:
          type: integer
          default: 0

    SigningKeyGroupScopePublish:
      type: object
      properties:
        allow:
          type: array
          items:
            type: string
        deny:
          type: array
          items:
            type: string

    SigningKeyGroupScopeSubscribe:
      type: object
      properties:
        allow:
          type: array
          items:
            type: string
        deny:
          type: array
          items:
            type: string

    User:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        email:
          type: string
        jwt:
          type: string
        key:
          type: string
        createdAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        deletedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"

    JWTInfo:
      type: object
      properties:
        description:
          type: string
        info_url:
          type: string

    JWTExport:
      type: object
      properties:
        name:
          type: string
        subject:
          type: string
        type:
          type: integer
        response_type:
          type: string
        account_token_position:
          type: integer
          x-go-type: "uint"
        info:
          $ref: "#/components/schemas/JWTInfo"

    JWTAccountClaims:
      type: object
      properties:
        exports:
          type: array
          items:
            $ref: "#/components/schemas/JWTExport"

    Version:
      type: object
      required:
        - version
        - date
      properties:
        version:
          type: string
        date:
          type: string

    Systems:
      type: array
      maxItems: 100
      items:
        $ref: "#/components/schemas/System"

security:
  - cookieAuth: []
  - bearerAuth: []
  - api_key: []
