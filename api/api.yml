openapi: 3.1.0

info:
  version: 1.0.0
  title: Typhoon API
  description: |
    # Introduction

    Typhoon is an event bridge for applications and services.
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"

servers:
  - url: http://localhost:8080/api/v1
    description: Development server

tags:
  - name: System
    description: |-
      These are the system managed by Typhoon.
  - name: Team
    description: |-
      These are the teams that are using Typhoon.
  - name: Triggers
    description: |-
      These are the triggers that are used to send events to Typhoon.

consumes:
  - "application/json"
produces:
  - "application/json"
schemes:
  #- "https"
  - "http"

paths:
  /version:
    get:
      summary: Returns the current version of the API.
      operationId: version
      tags:
        - Server
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"

  /teams:
    get:
      summary: List all teams
      operationId: listTeams
      tags:
        - Team
      produces:
        - "application/json"
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      security:
        - bearerAuth: ["read:teams"]
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResult"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Team"

    post:
      summary: Creates a new team
      operationId: createTeam
      tags:
        - Team
      produces:
        - "application/json"
      requestBody:
        $ref: "#/components/requestBodies/CreateTeam"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
      links:
        GetTeamById:
          operationId: getTeam
          parameters:
            teamId: "$response.body#/id"

  /teams/{teamId}:
    get:
      summary: Gets a team by ID
      operationId: getTeam
      parameters:
        - $ref: "#/components/parameters/teamId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"

  /teams/{teamId}/accounts:
    get:
      summary: List all accounts for a team
      operationId: listAccounts
      tags:
        - Team
      produces:
        - "application/json"
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      security:
        - bearerAuth: ["read:accounts"]
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResult"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Account"

  /teams/{teamId}/accounts/{accountId}:
    get:
      summary: Gets an account by ID
      operationId: getAccount
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: accountId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"

  /systems:
    get:
      summary: List all managed systems.
      operationId: listSystems
      tags:
        - System
      description: |-
        Returns a list of managed systems.
      responses:
        "200":
          description: A paginated response of all systems
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Systems"

  /systems/{systemId}:
    get:
      summary: List all managed systems.
      operationId: showSystem
      tags:
        - Systems
      description: |-
        Returns a list of managed systems.
      parameters:
        - name: systemId
          in: path
          required: true
          description: The id of the system to retrieve
          schema:
            type: string
      responses:
        "200":
          description: A paginated response of all systems

definitions:
  schemas:
    createTeamResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string

components:
  parameters:
    teamId:
      in: path
      name: teamId
      required: true
      schema:
        type: string
        format: uuid
      description: The id of the team to retrieve.
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
      description: The number of items to skip before starting to collect the result set.
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: The numbers of items to return.

  requestBodies:
    CreateTeam:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Team"

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    api_key:
      in: header
      name: api_key
      type: apiKey

  schemas:
    PaginatedResult:
      type: object
      properties:
        total:
          type: number
        offset:
          type: number
        limit:
          type: number
        results:
          type: array
          items:

    System:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          x-oapi-codegen-extra-tags:
            gorm: "type:uuid;default:gen_random_uuid()"
        name:
          type: string
          description: Name of the system
          example: "eu-west-1"
        description:
          type: string
          description: A description of the system.
        createdAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        deletedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"

    Team:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          x-oapi-codegen-extra-tags:
            gorm: "type:uuid;default:gen_random_uuid()"
        name:
          type: string
        description:
          type: string
        contactEmail:
          type: string
        createdAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        deletedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"

    Account:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          x-oapi-codegen-extra-tags:
            gorm: "type:uuid;default:gen_random_uuid()"
        name:
          type: string
        description:
          type: string
        contactEmail:
          type: string
        createdAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"
        deletedAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2021-01-30T08:30:00Z"

    Version:
      type: object
      required:
        - version
        - date
      properties:
        version:
          type: string
        date:
          type: string

    Systems:
      type: array
      maxItems: 100
      items:
        $ref: "#/components/schemas/System"

security:
  - cookieAuth: []
  - bearerAuth: []
  - api_key: []
