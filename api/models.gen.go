// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

const (
	Bearer_authScopes = "bearer_auth.Scopes"
)

// System defines model for System.
type System struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// Systems defines model for Systems.
type Systems = []System

// Version defines model for Version.
type Version struct {
	Date    string `json:"date"`
	Version string `json:"version"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xUzW7bPBB8FWLzHfVJSnrTzShyMBAEQR3kkhgFI20sBhLJLld2hEDvXiwl+Scxih7a",
	"XmyB3J+ZnVm+Q+la7yxaDlC8QyhrbHX8XPWBsZUvT84jscF4bir55d4jFBCYjN3AkIDVLZ65GBIg/NEZ",
	"wgqKR0meQtfJHOqeX7FkqTG2HLvMH/8RvkABF9kBaDahzCaIQwKtfluOGZd5vq+siXQv1w9IwTj7mUyl",
	"Gc/S2R4yfs1oDkzGWp9pSYKxLy62w1CS8Rwrw4VaWiZXdaUcPNkne1+juu997ZxVi7ul0k3jdkH1rlPs",
	"1O3ifpUa9yTNGlOiDRH7OHlYeF3WqK7SHBLoqIECamYfiizb7Xapjtepo0025YbsZvn1+nZ1/f9Vmqc1",
	"t40QZ8ONlDuCAUfjgMs0T3MJdB6t9gYK+BKPEvCa6zjVLByE3CB/Zv4NuSMblFaNCazci2q11Rus1JSZ",
	"QmxAWhKWFRRwYwLP/hAFgnfCQWpf5bn8lc4y2thNe9+YMiZnr2GUcTTN71kqjLKdgl4orzfGasZKzf0F",
	"um6aGXZ0R+jaVlM/YY7XZ9ix3gTxz9xwLanz4LL38WNZDX9yhqva7aadEbVIt8hIAuNjcTGiqaQo1zgV",
	"FAsSMhncIoinoYiSzxtdwAwajleEqcPkaPof12l9Xs1/P/ujlZ8Gfjq9h/2m/zX3zS2GYThlM4stapQd",
	"EVpWE95ZpMXd8oQb0hZJqEkhLDsy3Eeln1ET0nfdcQ3F41oECDF4NMLp04FvuvUNpsZl20uQ2KnBGccE",
	"VJowgpmeKsW15ng4q/Dczw9cevDNfumS/Ws2wR/Ww88AAAD//2R4wxyjBgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
