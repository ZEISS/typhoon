// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// System defines model for System.
type System struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// Systems defines model for Systems.
type Systems = []System

// Team defines model for Team.
type Team struct {
	Id   *openapi_types.UUID `gorm:"type:uuid;default:gen_random_uuid()" json:"id,omitempty"`
	Name string              `json:"name"`
}

// Version defines model for Version.
type Version struct {
	Date    string `json:"date"`
	Version string `json:"version"`
}

// CreateTeam defines model for CreateTeam.
type CreateTeam = Team

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = Team

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xW3W/bNhD/VwR2DxugSEr6pj15RQd4K4qiDroHxwgY6Wyxk0iOPMURAv3vw/HD8mcX",
	"oFn9YFAk7+t3v7vjM6tUp5UEiZaVz8zAPz1Y/E3VAtzGOwMc4RZ4R1+VkggSacm1bkXFUSiZf7VK0p6t",
	"Gug4rX4ysGYle5NP6nN/anOnbKRfGiScpcVgEZwVbZQGg8EDUdM/DhpYySwaITdsTJnkHZw5GFMXgzBQ",
	"s3JJwuHqKo1X1cNXqJB0eJPeSlx8y/Pg4piyjj/NvcR1Uew0c2P4QMcRr3ORrJXpOLKS9b3z7jCAlD1d",
	"Ka7FVaVq2IC8gic0/Ar5xqnYKNOx0smUJP9rDWvet1huQN4bLmvV3dP+z784KF4G0kV8voCxwqf2MJKa",
	"I5zNyuMk8W2b8WLqdZ1aJ3JA1RuBw4Lg94a5Fvd/w+DQlKxkDfAaTMxxuTufUqLFn+By8gDcgJn12JC0",
	"//o95uKPv25ZYCNJ+dNJS4OomSNspaTtnTPL0xJYpayGtZCCtuxUEW5Z7SrpM1itpIVX4PoxaGPKhFwr",
	"lyOwlREaXTrYm2Qu0ai6r2jjTt7J2waS20E3Sslk9mme8LZVW5sMqk9QJR9nt4tMqDvKUCsqCO4GmGea",
	"Vw0kN1nBUtabNkBkyzzfbrcZd8eZMps8yNr8w/zd+4+L91c3WZE12LUUFwpsSd2eG2yPQ+w6K7KCLioN",
	"kmvBSvbWbaVMc2wcZLmdingDeBr5Z8DeSJvwpBUWE7VOOi75BuokSGbMGTAukfOaleyDsBh7A9HWp8uZ",
	"uCmKV2uE0YRL26HTs0TzjZAcoU6ifXKdt21025dI33XcDMFnd3wmOt89lrHFrkgy4pY/+8W8Hl8TwkWj",
	"tsEcJcvwDhAMeXGsnHgoalKKDQSFxEADaAQ8Akt9qVPGp0KPTrP9toKmh3QP/ON6WZ1P5o+D3gbsEfgB",
	"Y0/p5yZISu2h7qvL7ea7uPmimeen9fGIO2Xsoq8qsHbdt+0Otks4+fAncJyN1ZgyrewZPPbeIC9BJL5g",
	"hkuhHTxy8j3t43lAv/upk16oJyK8Hwu1w+QIL+8ZlZ2Erb9wghmxaW/onuXTl92s/d9aWTQRn3W7GA5C",
	"7Y0BiUnwN5b87NP8oFLAPIKh0Mb/zraNT4Oln9Gr6dXgWo0f5PfcTf3lakz3nhDL1eiukznfmKZJVuZ5",
	"qyreNspi+bYoivzxmtH14OWZJmYh4QZcRGF4JthwdJuxMTwMceRmUyvbvSp34zWQcfcdIBlX478BAAD/",
	"/7CVrsOwCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
