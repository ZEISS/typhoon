// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// System defines model for System.
type System struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// Systems defines model for Systems.
type Systems = []System

// Team defines model for Team.
type Team struct {
	Id   *openapi_types.UUID `gorm:"type:uuid;default:gen_random_uuid()" json:"id,omitempty"`
	Name string              `json:"name"`
}

// Version defines model for Version.
type Version struct {
	Date    string `json:"date"`
	Version string `json:"version"`
}

// CreateTeam defines model for CreateTeam.
type CreateTeam = Team

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = Team

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWS2/jNhD+KwS3hxaQJSe9qSd3sQXcLhaLtbE9OEbASGOLW4lkyVEcIdB/L4YPy06c",
	"tEDT5hBQ5Dy/bx5+5JXujFag0PHykVv4sweHP+tagr94b0EgrEF09FVphaCQjsKYVlYCpVbFN6cV3bmq",
	"gU7Q6TsLO17yd8VkvgivrvDGRvrLoob3tBocgvdirDZgMUYga/qPgwFecodWqj0fM65EBxcexsznIC3U",
	"vNyQchTdZklU332DCslGcBm8pMNrkccQx4x34mEZNK7m86NlYa0Y6DnhdSmTnbadQF7yvvfRnSeQ8YeZ",
	"FkbOKl3DHtQMHtCKGYq9N7HXtuOl1ylJ/6cadqJvsdyDurVC1bq7pfvvf/BQ/DOQXsTnK1gnA7XnmdQC",
	"4SIr95PG6z6TYBZsPfdOxQFVbyUOK4I/OBZG3v4Bg0dT8ZI3IGqwiePy+D5RYuRv4Dm5A2HBLnpsSDt8",
	"/ZK4+PX3NY/VSFrhdbLSIBruC7bSyvU+mM3zFthmvIadVJKu3NQR/lgdO+kLOKOVgzeo9aegjRmXaqc9",
	"R+AqKw16Ovg7tlRodd1XdHGjbtS6AbYeTKO1YovPSybaVh8cG3TPULNPi/Uql/qGGGplBTHcCPPCiKoB",
	"dp3PecZ720aIXFkUh8MhF/4513ZfRF1XfFy+//Bp9WF2nc/zBruW8kKJLZk7CYOf1BC/yuf5nAS1ASWM",
	"5CX/0V9l3AhsPGSFm5p4D/g88y+AvVWOCdZKh0zvWCeU2EPNombOvQPriVzWvOQfpcM0G6hsA13exfV8",
	"/maDMLnwtJ0HvWBG7KUSCDVL/il00bYp7NAifdcJO8SY/fOF7ML02KQRuyXNhFvxGA7LenxLCFeNPkR3",
	"RJYVHSBYiuKpcapDWZNRbCAapAq0gFbCPfAstDoxPjV6CpqfjhW0PWQn4D/tl+1lMv8/6F3EHkGEijXa",
	"ebzPwTtZuhlNiLqvXp4408oeXiq4s61enFgfLwPyr3d79kIBEcNhDtYMk+gEZIiM6kzBIQh4BCl1bzmg",
	"d7JkYrmew/f1uFv+s9ZNLtLPmGMKZ5n21oJCFuNNJb74vDyrDLD3YCm18e/JdmkVbsJO2k5b0rdWWFy3",
	"wm+5zXbMTlbmZjt6cXIXGvF8csOD6EwLudTF/RUn2RjihY51wIQFn07cFAwbgf4ydcHdkPZLPvXt8SfU",
	"cZfEQjx+RzzG7fhXAAAA///FGweRnQoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
