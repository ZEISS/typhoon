// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Api_keyScopes     = "api_key.Scopes"
	Bearer_authScopes = "bearer_auth.Scopes"
)

// PaginatedResult defines model for PaginatedResult.
type PaginatedResult struct {
	Limit   *float32       `json:"limit,omitempty"`
	Offset  *float32       `json:"offset,omitempty"`
	Results *[]interface{} `json:"results,omitempty"`
	Total   *float32       `json:"total,omitempty"`
}

// System defines model for System.
type System struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// Systems defines model for Systems.
type Systems = []System

// Team defines model for Team.
type Team struct {
	ContactEmail *string `json:"contactEmail,omitempty"`

	// CreatedAt Creation date and time
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Creation date and time
	DeletedAt   *time.Time          `json:"deletedAt,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `gorm:"type:uuid;default:gen_random_uuid()" json:"id,omitempty"`
	Name        string              `json:"name"`

	// UpdatedAt Creation date and time
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Version defines model for Version.
type Version struct {
	Date    string `json:"date"`
	Version string `json:"version"`
}

// LimitParam defines model for limitParam.
type LimitParam = int

// OffsetParam defines model for offsetParam.
type OffsetParam = int

// CreateTeam defines model for CreateTeam.
type CreateTeam = Team

// ListTeamParams defines parameters for ListTeam.
type ListTeamParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = Team

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RXW2/bNhT+KwS7hw2QLSXFgEJ7cruu8Fa0QWN0wFwjoKVji61EquRREyHQfx8OqZtt",
	"uQ2wdH0xLF7O5fvOjfc80UWpFSi0PL7npTCiAATjvnJZSLyiJfpKwSZGlii14jFfZcBUVWzBWKZ3TCIU",
	"lqFmBrAyas4DLunY5wpMzQOuRAE89hJ5wG2SQSG81J2ocuTxZRTwQtzJoip4/Ct9SOU/LgKOdUnXpULY",
	"g+FNE3C921n4tnUHxtlPsmRb2GkDzKIwKNWe1hOd55AgwwyYAVvlyCzgOSe85mkvxnZHE3Y3ATfwuQKL",
	"z3UqwcH8woBAWIF3JNEKQSH9FWWZy0SQT+FHS47dj3T+ZGDHY/4kHCgM/a4NnbCmcfraNbpyJfZSCYT0",
	"nXPSMW50CQZbUzw/8X1nuMeQ93BPbnnE7GhPGCNq2kKNIp+41PTQ6O1HSJDOXtcWoTi1SaYjARaNVHs6",
	"7sk42WgBlgZSHq/pcnt0c1al19L9+RqsrYmNi9Slv3ERDTz3fndkHnpC1IoEXxZC5pM+JS4S0gWeRrQL",
	"EqkVSwUCEyplKAvgAYc7UZQ5ybmMLi9m0cXsabSKnsVPoziK/uEB32lTCOQxp5uz9taJ6hRy+GGqR9om",
	"UPEB0MuqKkeqAZG+VXnNYzQVHIsN+N1Mi1LOEp3CHtQM7tCIGYq9Y2KvTcFjdycmeb+1CRzvQd0YoVJd",
	"3ND6z7+4iDoTawGvyvTHEHYU5mcj/D0Y2+J6GIske9KlL8ONr+vsDgZe1ql2qj2QVEZifU0J5BWLUt58",
	"gtrlHOGUgUjBDNW12x+SqpR/gcuqLQgDZlFhRrf91x8dWH/+vepKMt3yu4OUDLH09TfRylbOmPVphd1Q",
	"OO6kkrRkh4Lr87cv1O/AllpZeIRqdQwaBbza6dOAesKWCo1Oq4QWPqgPirrcqi4zrRVbXC2ZyHN9a1mt",
	"K2pqbxar67nUH4ihXCbQmtvCvChFkgG7nEc84JXJW4hsHIa3t7dz4bbn2uzD9q4NXy9fvHxz/XJ2OY/m",
	"GRa5K/ASXSiPzOCjGOIX82geuf5RghKl5DF/6pYCXgrMHGShHcrwHiZS6Z2bKSwTLJcWqaMXQok9pKy9",
	"SZ2aSHBELlMe89fSYlfdXYdydDkVl1H0aH22U+FoOzR6wcqu27JOP5ku8rwz26dIVRTC1K3NbnvCO1+4",
	"1l2T3NDNDrfw3v9Zps1jQnid6dtWXXAwGK6npi2ZklAaoLzAdhY0Er5AN0cR40Oid0bzcVnxtXwA/zhf",
	"NtNk/n/Q2xZ7BFGE9/R7CHuPIY9pyQ0Cx8i+8usrd/kU3AmssDt6Hqnj/vhA5B513DzOgesqScDaXZUf",
	"4f0KkGKR3GLbmi1/5z2odgrMPqdbPI8Qm7JtOBKOnwpN8M3jo2cPoVa6mnu+X/wnVEWev92d9aHD93hu",
	"JycO285oBn/QJOsZOx5cT9vR5qus5n16ncsnz+iQRE7vpgl4qS36F4f65Kxtk+J5vUxPqR8y6fCF2uZF",
	"TL56Q+ZbndZPQpn6eDwUM3ppPYTX7p1Wn0Pz4CkXjqQ3J2Fx8d2TzatPj5jwq5RsCm4dHadsUOqNxr7J",
	"5HvfT3vfrYp0Krp3a+9D17youySVMaCQtfZ2TWdxtTyo1WC+gOE+er9FtO2G07WfEjfD3Ooy04+SN8LN",
	"nesNJV8/xK43jTtO6nwtGmapOAxznYg80xbjZ9GzyJWT1sSJHmqBCQPOnXZ2Y5gJdItdX9rW3cQ3H7pD",
	"/yztp7s2CPvvFo9m0/wbAAD//0gBizzyEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
