{"/development":{"title":"Quickstart","data":{"":"The repository contains a Development Container specification\nthat can be used with OrbStack or GitHub Codesspaces.\nIt is assumed that you use the development container to create your development environment.\nBecause Typhoon is based on Knative, you need a local Kubernetes cluster.\nThere are many options but we recommend to use kind.If you have created the development container in Visual Studio Code\nor any other code editor that supports execute the following command.\nThis will setup a local kind cluster and install Knative and also NATS.io.After the setup is done you can start the development server with the following command.\nThis creates the needed containers of the controllers and adapters using ko."}},"/getting_started/concepts":{"title":"Concepts","data":{"":"Typhoon is a cloud-native eventing platform that enables you to\nbridge events between sources and targets and in-between transform\nthese events.There are various needed concepts to achieve this bridging.\nEvents\nSources\nTargets\nTransformations\nFlow","events#Events":"An event is a common format of data that can be exchanged between sources and targets.Typhoon is using CloudEvents as the event format.\nTyphoon supports the JSON format of CloudEvents and uses theHTTP protocol bindingThe format of a CloudEvent is as follows:\nThe data can be processed via the availble CloudEvents SDKs.\nBecause this is an agnostic format, it can be used to transport all kind of data without\nthe need to preemtively define the data structure.","sources#Sources":"Sources are the origin of events. These maybe created in any environment in which\nTyphoon is deployed in. This can be on-premise on in the public cloud.\nNATS.io can be run in any of these environments.All sources are listed and documented in the Sources section.","targets#Targets":"Targets are the destination of events. Usually any source is also a target or vise versa.Not all targets behave the same way. Some targets only acknowledge to receive the event,\nbut only later process the event data. Others provide additional information about the\nevent processing, which actually creates a response event.All targets are listed and documented in the Targets section.","transformations#Transformations":"Transformations are the in-between processing of events. This can be a simple Transformations\nlike adding annotations to the event or a more complex transformation like changing the event\nstructure or format.All transformations are listed and documented in the Transformations section."}},"/getting_started":{"title":"Quickstart","data":{"":"Typhoon is a cloud-native technology that help you to receive, filter, transform, route and deliver events\nacross a wide-range of sources and targets.","application-integration#Application integration":"Send events from on-premises applications to the cloud and back and use the events to build new applications.","it-automation#IT Automation":"Use events to automate your infrastructure for validating configurations, monitoring, and alerting.\nAudit user behavior, or remediate security incidents.","saas-integrations#SaaS Integrations":"Receive events from your SaaS applications, like Salesforce or ServiceNow, enrich your data,\nand send the results back or to other destinations."}},"/":{"title":"Home","data":{"":"This is the documentation for Typhoon, a cloud-native event bridge for Kubernetes.","install#Install":"Helm is the recommended way to install Typhoon.\nLearn more about Typhoon in the Getting Started guide."}},"/sources/webhook":{"title":"Webhook Source (HTTP)","data":{"":"The source exposes an HTTP endpoint. This endpoint can be used to virtually\nintegrate with any 3rd-party system. It is a generic way to ingest events via HTTP.Every request will create an event.The webhook can receive arbitrary data that is wrapped in a CloudEvent envelope.","configuration#Configuration":"Parameters:\nName: Unique name of the WebhookSource in the namespaces.\nEventType: Type of the event that will be produced by the source.\nEventSource: Source of the event that will be produced by the source.\nBasic Auth Username (optional): Username for basic authentication.\nBasic Auth Password (optional): Password for basic authentication.\nEvents produced have the following attributes:\nType of the event is defined the WebhookSource configuration, e.g. com.zeiss.typhoon.sample.event\nSource is defined in the WebhookSource configuration, e.g. hungry-hypatia\nSchema of the data attribite depends on the client side send data to the WebhookSource\ndatacontenttype is set to the Content-Type received at the incoming request"}},"/sources":{"title":"Quickstart","data":{}},"/targets/http":{"title":"HTTP Target","data":{"":"Sends event over HTTP to other service. This is the most general target,\nas it can be used to send events to any service that can accept HTTP requests.\nresponse.eventType event type for the response message.\nresponse.eventSource event source for the response message.\nendpoint URL including path and querystring for the remote HTTP service.\nmethod verb for the HTTP rquest.\nskipVerify to skip remote server TLS certificate verification. Optional\ncaCertificate CA certificate configured for TLS connection. Optional\nbasicAuthUsername basic authentication user name. Optional\nbasicAuthPassword secret reference to basic authentication password. Optional\nheaders string map of key/value pairs as HTTP headers. Optional"}},"/targets":{"title":"Quickstart","data":{}},"/transformations":{"title":"Quickstart","data":{}}}