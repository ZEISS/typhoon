// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/zeiss/typhoon/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SalesforceTargetLister helps list SalesforceTargets.
// All objects returned here must be treated as read-only.
type SalesforceTargetLister interface {
	// List lists all SalesforceTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SalesforceTarget, err error)
	// SalesforceTargets returns an object that can list and get SalesforceTargets.
	SalesforceTargets(namespace string) SalesforceTargetNamespaceLister
	SalesforceTargetListerExpansion
}

// salesforceTargetLister implements the SalesforceTargetLister interface.
type salesforceTargetLister struct {
	indexer cache.Indexer
}

// NewSalesforceTargetLister returns a new SalesforceTargetLister.
func NewSalesforceTargetLister(indexer cache.Indexer) SalesforceTargetLister {
	return &salesforceTargetLister{indexer: indexer}
}

// List lists all SalesforceTargets in the indexer.
func (s *salesforceTargetLister) List(selector labels.Selector) (ret []*v1alpha1.SalesforceTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SalesforceTarget))
	})
	return ret, err
}

// SalesforceTargets returns an object that can list and get SalesforceTargets.
func (s *salesforceTargetLister) SalesforceTargets(namespace string) SalesforceTargetNamespaceLister {
	return salesforceTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SalesforceTargetNamespaceLister helps list and get SalesforceTargets.
// All objects returned here must be treated as read-only.
type SalesforceTargetNamespaceLister interface {
	// List lists all SalesforceTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SalesforceTarget, err error)
	// Get retrieves the SalesforceTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SalesforceTarget, error)
	SalesforceTargetNamespaceListerExpansion
}

// salesforceTargetNamespaceLister implements the SalesforceTargetNamespaceLister
// interface.
type salesforceTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SalesforceTargets in the indexer for a given namespace.
func (s salesforceTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SalesforceTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SalesforceTarget))
	})
	return ret, err
}

// Get retrieves the SalesforceTarget from the indexer for a given namespace and name.
func (s salesforceTargetNamespaceLister) Get(name string) (*v1alpha1.SalesforceTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("salesforcetarget"), name)
	}
	return obj.(*v1alpha1.SalesforceTarget), nil
}
