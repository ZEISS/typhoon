// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/zeiss/typhoon/pkg/apis/targets/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LogzTargetLister helps list LogzTargets.
// All objects returned here must be treated as read-only.
type LogzTargetLister interface {
	// List lists all LogzTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogzTarget, err error)
	// LogzTargets returns an object that can list and get LogzTargets.
	LogzTargets(namespace string) LogzTargetNamespaceLister
	LogzTargetListerExpansion
}

// logzTargetLister implements the LogzTargetLister interface.
type logzTargetLister struct {
	indexer cache.Indexer
}

// NewLogzTargetLister returns a new LogzTargetLister.
func NewLogzTargetLister(indexer cache.Indexer) LogzTargetLister {
	return &logzTargetLister{indexer: indexer}
}

// List lists all LogzTargets in the indexer.
func (s *logzTargetLister) List(selector labels.Selector) (ret []*v1alpha1.LogzTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogzTarget))
	})
	return ret, err
}

// LogzTargets returns an object that can list and get LogzTargets.
func (s *logzTargetLister) LogzTargets(namespace string) LogzTargetNamespaceLister {
	return logzTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LogzTargetNamespaceLister helps list and get LogzTargets.
// All objects returned here must be treated as read-only.
type LogzTargetNamespaceLister interface {
	// List lists all LogzTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogzTarget, err error)
	// Get retrieves the LogzTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LogzTarget, error)
	LogzTargetNamespaceListerExpansion
}

// logzTargetNamespaceLister implements the LogzTargetNamespaceLister
// interface.
type logzTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LogzTargets in the indexer for a given namespace.
func (s logzTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LogzTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogzTarget))
	})
	return ret, err
}

// Get retrieves the LogzTarget from the indexer for a given namespace and name.
func (s logzTargetNamespaceLister) Get(name string) (*v1alpha1.LogzTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("logztarget"), name)
	}
	return obj.(*v1alpha1.LogzTarget), nil
}
