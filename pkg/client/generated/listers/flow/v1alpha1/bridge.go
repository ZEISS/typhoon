// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/zeiss/typhoon/pkg/apis/flow/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BridgeLister helps list Bridges.
// All objects returned here must be treated as read-only.
type BridgeLister interface {
	// List lists all Bridges in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Bridge, err error)
	// Bridges returns an object that can list and get Bridges.
	Bridges(namespace string) BridgeNamespaceLister
	BridgeListerExpansion
}

// bridgeLister implements the BridgeLister interface.
type bridgeLister struct {
	indexer cache.Indexer
}

// NewBridgeLister returns a new BridgeLister.
func NewBridgeLister(indexer cache.Indexer) BridgeLister {
	return &bridgeLister{indexer: indexer}
}

// List lists all Bridges in the indexer.
func (s *bridgeLister) List(selector labels.Selector) (ret []*v1alpha1.Bridge, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Bridge))
	})
	return ret, err
}

// Bridges returns an object that can list and get Bridges.
func (s *bridgeLister) Bridges(namespace string) BridgeNamespaceLister {
	return bridgeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BridgeNamespaceLister helps list and get Bridges.
// All objects returned here must be treated as read-only.
type BridgeNamespaceLister interface {
	// List lists all Bridges in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Bridge, err error)
	// Get retrieves the Bridge from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Bridge, error)
	BridgeNamespaceListerExpansion
}

// bridgeNamespaceLister implements the BridgeNamespaceLister
// interface.
type bridgeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Bridges in the indexer for a given namespace.
func (s bridgeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Bridge, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Bridge))
	})
	return ret, err
}

// Get retrieves the Bridge from the indexer for a given namespace and name.
func (s bridgeNamespaceLister) Get(name string) (*v1alpha1.Bridge, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bridge"), name)
	}
	return obj.(*v1alpha1.Bridge), nil
}
