// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	apistargetsv1alpha1 "github.com/zeiss/typhoon/pkg/apis/targets/v1alpha1"
	internalclientset "github.com/zeiss/typhoon/pkg/client/generated/clientset/internalclientset"
	internalinterfaces "github.com/zeiss/typhoon/pkg/client/generated/listers/externalversions/internalinterfaces"
	targetsv1alpha1 "github.com/zeiss/typhoon/pkg/client/generated/listers/targets/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// KafkaTargetInformer provides access to a shared informer and lister for
// KafkaTargets.
type KafkaTargetInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() targetsv1alpha1.KafkaTargetLister
}

type kafkaTargetInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewKafkaTargetInformer constructs a new informer for KafkaTarget type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewKafkaTargetInformer(client internalclientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredKafkaTargetInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredKafkaTargetInformer constructs a new informer for KafkaTarget type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredKafkaTargetInformer(client internalclientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TargetsV1alpha1().KafkaTargets(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TargetsV1alpha1().KafkaTargets(namespace).Watch(context.TODO(), options)
			},
		},
		&apistargetsv1alpha1.KafkaTarget{},
		resyncPeriod,
		indexers,
	)
}

func (f *kafkaTargetInformer) defaultInformer(client internalclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredKafkaTargetInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *kafkaTargetInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apistargetsv1alpha1.KafkaTarget{}, f.defaultInformer)
}

func (f *kafkaTargetInformer) Lister() targetsv1alpha1.KafkaTargetLister {
	return targetsv1alpha1.NewKafkaTargetLister(f.Informer().GetIndexer())
}
