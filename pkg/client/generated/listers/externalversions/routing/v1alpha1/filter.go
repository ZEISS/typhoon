// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	apisroutingv1alpha1 "github.com/zeiss/typhoon/pkg/apis/routing/v1alpha1"
	internalclientset "github.com/zeiss/typhoon/pkg/client/generated/clientset/internalclientset"
	internalinterfaces "github.com/zeiss/typhoon/pkg/client/generated/listers/externalversions/internalinterfaces"
	routingv1alpha1 "github.com/zeiss/typhoon/pkg/client/generated/listers/routing/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// FilterInformer provides access to a shared informer and lister for
// Filters.
type FilterInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() routingv1alpha1.FilterLister
}

type filterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewFilterInformer constructs a new informer for Filter type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilterInformer(client internalclientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredFilterInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredFilterInformer constructs a new informer for Filter type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredFilterInformer(client internalclientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.RoutingV1alpha1().Filters(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.RoutingV1alpha1().Filters(namespace).Watch(context.TODO(), options)
			},
		},
		&apisroutingv1alpha1.Filter{},
		resyncPeriod,
		indexers,
	)
}

func (f *filterInformer) defaultInformer(client internalclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredFilterInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *filterInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apisroutingv1alpha1.Filter{}, f.defaultInformer)
}

func (f *filterInformer) Lister() routingv1alpha1.FilterLister {
	return routingv1alpha1.NewFilterLister(f.Informer().GetIndexer())
}
