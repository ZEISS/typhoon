// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/zeiss/typhoon/pkg/apis/eventing/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RedisBrokerLister helps list RedisBrokers.
// All objects returned here must be treated as read-only.
type RedisBrokerLister interface {
	// List lists all RedisBrokers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RedisBroker, err error)
	// RedisBrokers returns an object that can list and get RedisBrokers.
	RedisBrokers(namespace string) RedisBrokerNamespaceLister
	RedisBrokerListerExpansion
}

// redisBrokerLister implements the RedisBrokerLister interface.
type redisBrokerLister struct {
	indexer cache.Indexer
}

// NewRedisBrokerLister returns a new RedisBrokerLister.
func NewRedisBrokerLister(indexer cache.Indexer) RedisBrokerLister {
	return &redisBrokerLister{indexer: indexer}
}

// List lists all RedisBrokers in the indexer.
func (s *redisBrokerLister) List(selector labels.Selector) (ret []*v1alpha1.RedisBroker, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedisBroker))
	})
	return ret, err
}

// RedisBrokers returns an object that can list and get RedisBrokers.
func (s *redisBrokerLister) RedisBrokers(namespace string) RedisBrokerNamespaceLister {
	return redisBrokerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RedisBrokerNamespaceLister helps list and get RedisBrokers.
// All objects returned here must be treated as read-only.
type RedisBrokerNamespaceLister interface {
	// List lists all RedisBrokers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RedisBroker, err error)
	// Get retrieves the RedisBroker from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RedisBroker, error)
	RedisBrokerNamespaceListerExpansion
}

// redisBrokerNamespaceLister implements the RedisBrokerNamespaceLister
// interface.
type redisBrokerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RedisBrokers in the indexer for a given namespace.
func (s redisBrokerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RedisBroker, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedisBroker))
	})
	return ret, err
}

// Get retrieves the RedisBroker from the indexer for a given namespace and name.
func (s redisBrokerNamespaceLister) Get(name string) (*v1alpha1.RedisBroker, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("redisbroker"), name)
	}
	return obj.(*v1alpha1.RedisBroker), nil
}
