// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/zeiss/typhoon/pkg/apis/sources/v1alpha1"
	sourcesv1alpha1 "github.com/zeiss/typhoon/pkg/client/generated/clientset/internalclientset/typed/sources/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeKafkaSources implements KafkaSourceInterface
type fakeKafkaSources struct {
	*gentype.FakeClientWithList[*v1alpha1.KafkaSource, *v1alpha1.KafkaSourceList]
	Fake *FakeSourcesV1alpha1
}

func newFakeKafkaSources(fake *FakeSourcesV1alpha1, namespace string) sourcesv1alpha1.KafkaSourceInterface {
	return &fakeKafkaSources{
		gentype.NewFakeClientWithList[*v1alpha1.KafkaSource, *v1alpha1.KafkaSourceList](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("kafkasources"),
			v1alpha1.SchemeGroupVersion.WithKind("KafkaSource"),
			func() *v1alpha1.KafkaSource { return &v1alpha1.KafkaSource{} },
			func() *v1alpha1.KafkaSourceList { return &v1alpha1.KafkaSourceList{} },
			func(dst, src *v1alpha1.KafkaSourceList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.KafkaSourceList) []*v1alpha1.KafkaSource {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.KafkaSourceList, items []*v1alpha1.KafkaSource) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
