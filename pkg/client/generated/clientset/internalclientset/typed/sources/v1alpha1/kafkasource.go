// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	sourcesv1alpha1 "github.com/zeiss/typhoon/pkg/apis/sources/v1alpha1"
	scheme "github.com/zeiss/typhoon/pkg/client/generated/clientset/internalclientset/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// KafkaSourcesGetter has a method to return a KafkaSourceInterface.
// A group's client should implement this interface.
type KafkaSourcesGetter interface {
	KafkaSources(namespace string) KafkaSourceInterface
}

// KafkaSourceInterface has methods to work with KafkaSource resources.
type KafkaSourceInterface interface {
	Create(ctx context.Context, kafkaSource *sourcesv1alpha1.KafkaSource, opts v1.CreateOptions) (*sourcesv1alpha1.KafkaSource, error)
	Update(ctx context.Context, kafkaSource *sourcesv1alpha1.KafkaSource, opts v1.UpdateOptions) (*sourcesv1alpha1.KafkaSource, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, kafkaSource *sourcesv1alpha1.KafkaSource, opts v1.UpdateOptions) (*sourcesv1alpha1.KafkaSource, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*sourcesv1alpha1.KafkaSource, error)
	List(ctx context.Context, opts v1.ListOptions) (*sourcesv1alpha1.KafkaSourceList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *sourcesv1alpha1.KafkaSource, err error)
	KafkaSourceExpansion
}

// kafkaSources implements KafkaSourceInterface
type kafkaSources struct {
	*gentype.ClientWithList[*sourcesv1alpha1.KafkaSource, *sourcesv1alpha1.KafkaSourceList]
}

// newKafkaSources returns a KafkaSources
func newKafkaSources(c *SourcesV1alpha1Client, namespace string) *kafkaSources {
	return &kafkaSources{
		gentype.NewClientWithList[*sourcesv1alpha1.KafkaSource, *sourcesv1alpha1.KafkaSourceList](
			"kafkasources",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *sourcesv1alpha1.KafkaSource { return &sourcesv1alpha1.KafkaSource{} },
			func() *sourcesv1alpha1.KafkaSourceList { return &sourcesv1alpha1.KafkaSourceList{} },
		),
	}
}
