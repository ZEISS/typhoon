// Package apis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package apis

import (
	"context"
	"fmt"
	"net/url"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all operators
	// (GET /operators)
	ListOperator(c *fiber.Ctx, params ListOperatorParams) error
	// Creates a new operator
	// (POST /operators)
	CreateOperator(c *fiber.Ctx) error
	// Deletes an operator by ID
	// (DELETE /operators/{operatorId})
	DeleteOperator(c *fiber.Ctx, operatorId OperatorId) error
	// Gets an operator by ID
	// (GET /operators/{operatorId})
	GetOperator(c *fiber.Ctx, operatorId OperatorId) error
	// Updates an operator by ID
	// (PUT /operators/{operatorId})
	UpdateOperator(c *fiber.Ctx, operatorId OperatorId) error
	// List all accounts for an operator
	// (GET /operators/{operatorId}/accounts)
	ListOperatorAccounts(c *fiber.Ctx, operatorId OperatorId, params ListOperatorAccountsParams) error
	// Creates a new account
	// (POST /operators/{operatorId}/accounts)
	CreateOperatorAccount(c *fiber.Ctx, operatorId OperatorId) error
	// List all signing keys for an operator
	// (GET /operators/{operatorId}/signing-keys)
	ListOperatorSigningKeys(c *fiber.Ctx, operatorId OperatorId, params ListOperatorSigningKeysParams) error
	// Creates a new signing key
	// (POST /operators/{operatorId}/signing-keys)
	CreateOperatorSigningKey(c *fiber.Ctx, operatorId OperatorId) error
	// List all managed systems.
	// (GET /systems)
	ListSystems(c *fiber.Ctx) error
	// Creates a new system
	// (POST /systems)
	CreateSystem(c *fiber.Ctx) error
	// List all managed systems.
	// (GET /systems/{systemId})
	GetSystem(c *fiber.Ctx, systemId string) error
	// Updates a system by ID
	// (PUT /systems/{systemId})
	UpdateSystem(c *fiber.Ctx, systemId string) error
	// List all teams
	// (GET /teams)
	ListTeams(c *fiber.Ctx, params ListTeamsParams) error
	// Creates a new team
	// (POST /teams)
	CreateTeam(c *fiber.Ctx) error
	// Gets a team by ID
	// (GET /teams/{teamId})
	GetTeam(c *fiber.Ctx, teamId TeamId) error
	// List all accounts for a team
	// (GET /teams/{teamId}/accounts)
	ListTeamAccounts(c *fiber.Ctx, teamId TeamId, params ListTeamAccountsParams) error
	// Gets an account by ID
	// (GET /teams/{teamId}/accounts/{accountId})
	GetAccount(c *fiber.Ctx, teamId openapi_types.UUID, accountId openapi_types.UUID) error
	// List all signing key groups for an account
	// (GET /teams/{teamId}/accounts/{accountId}/groups)
	ListGroups(c *fiber.Ctx, teamId TeamId, accountId AccountId, params ListGroupsParams) error
	// Creates a new signing key group
	// (POST /teams/{teamId}/accounts/{accountId}/groups)
	CreateGroup(c *fiber.Ctx, teamId TeamId, accountId AccountId) error
	// Gets a signing key group by ID
	// (GET /teams/{teamId}/accounts/{accountId}/groups/{groupId})
	GetGroup(c *fiber.Ctx, teamId TeamId, accountId AccountId, groupId GroupId) error
	// Updates a signing key group by ID
	// (PUT /teams/{teamId}/accounts/{accountId}/groups/{groupId})
	UpdateGroup(c *fiber.Ctx, teamId TeamId, accountId AccountId, groupId GroupId) error
	// List all users for an account
	// (GET /teams/{teamId}/accounts/{accountId}/users)
	ListUsers(c *fiber.Ctx, teamId TeamId, accountId AccountId, params ListUsersParams) error
	// Creates a new user
	// (POST /teams/{teamId}/accounts/{accountId}/users)
	CreateUser(c *fiber.Ctx, teamId TeamId, accountId AccountId) error
	// Gets a user by ID
	// (GET /teams/{teamId}/accounts/{accountId}/users/{userId})
	GetUser(c *fiber.Ctx, teamId TeamId, accountId AccountId, userId openapi_types.UUID) error
	// Updates a user by ID
	// (PUT /teams/{teamId}/accounts/{accountId}/users/{userId})
	UpdateUser(c *fiber.Ctx, teamId TeamId, accountId AccountId, userId openapi_types.UUID) error
	// Returns the current version of the API.
	// (GET /version)
	Version(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// ListOperator operation middleware
func (siw *ServerInterfaceWrapper) ListOperator(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{"read:operators"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListOperatorParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.ListOperator(c, params)
}

// CreateOperator operation middleware
func (siw *ServerInterfaceWrapper) CreateOperator(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.CreateOperator(c)
}

// DeleteOperator operation middleware
func (siw *ServerInterfaceWrapper) DeleteOperator(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.DeleteOperator(c, operatorId)
}

// GetOperator operation middleware
func (siw *ServerInterfaceWrapper) GetOperator(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetOperator(c, operatorId)
}

// UpdateOperator operation middleware
func (siw *ServerInterfaceWrapper) UpdateOperator(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.UpdateOperator(c, operatorId)
}

// ListOperatorAccounts operation middleware
func (siw *ServerInterfaceWrapper) ListOperatorAccounts(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{"read:accounts"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListOperatorAccountsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.ListOperatorAccounts(c, operatorId, params)
}

// CreateOperatorAccount operation middleware
func (siw *ServerInterfaceWrapper) CreateOperatorAccount(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.CreateOperatorAccount(c, operatorId)
}

// ListOperatorSigningKeys operation middleware
func (siw *ServerInterfaceWrapper) ListOperatorSigningKeys(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{"read:signing-keys"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListOperatorSigningKeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.ListOperatorSigningKeys(c, operatorId, params)
}

// CreateOperatorSigningKey operation middleware
func (siw *ServerInterfaceWrapper) CreateOperatorSigningKey(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.CreateOperatorSigningKey(c, operatorId)
}

// ListSystems operation middleware
func (siw *ServerInterfaceWrapper) ListSystems(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.ListSystems(c)
}

// CreateSystem operation middleware
func (siw *ServerInterfaceWrapper) CreateSystem(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.CreateSystem(c)
}

// GetSystem operation middleware
func (siw *ServerInterfaceWrapper) GetSystem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "systemId" -------------
	var systemId string

	err = runtime.BindStyledParameterWithOptions("simple", "systemId", c.Params("systemId"), &systemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter systemId: %w", err).Error())
	}

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetSystem(c, systemId)
}

// UpdateSystem operation middleware
func (siw *ServerInterfaceWrapper) UpdateSystem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "systemId" -------------
	var systemId string

	err = runtime.BindStyledParameterWithOptions("simple", "systemId", c.Params("systemId"), &systemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter systemId: %w", err).Error())
	}

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.UpdateSystem(c, systemId)
}

// ListTeams operation middleware
func (siw *ServerInterfaceWrapper) ListTeams(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{"read:teams"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.ListTeams(c, params)
}

// CreateTeam operation middleware
func (siw *ServerInterfaceWrapper) CreateTeam(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.CreateTeam(c)
}

// GetTeam operation middleware
func (siw *ServerInterfaceWrapper) GetTeam(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetTeam(c, teamId)
}

// ListTeamAccounts operation middleware
func (siw *ServerInterfaceWrapper) ListTeamAccounts(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{"read:accounts"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamAccountsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.ListTeamAccounts(c, teamId, params)
}

// GetAccount operation middleware
func (siw *ServerInterfaceWrapper) GetAccount(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetAccount(c, teamId, accountId)
}

// ListGroups operation middleware
func (siw *ServerInterfaceWrapper) ListGroups(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{"read:groups"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGroupsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.ListGroups(c, teamId, accountId, params)
}

// CreateGroup operation middleware
func (siw *ServerInterfaceWrapper) CreateGroup(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.CreateGroup(c, teamId, accountId)
}

// GetGroup operation middleware
func (siw *ServerInterfaceWrapper) GetGroup(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	// ------------- Path parameter "groupId" -------------
	var groupId GroupId

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Params("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter groupId: %w", err).Error())
	}

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetGroup(c, teamId, accountId, groupId)
}

// UpdateGroup operation middleware
func (siw *ServerInterfaceWrapper) UpdateGroup(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	// ------------- Path parameter "groupId" -------------
	var groupId GroupId

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Params("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter groupId: %w", err).Error())
	}

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.UpdateGroup(c, teamId, accountId, groupId)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{"read:users"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.ListUsers(c, teamId, accountId, params)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.CreateUser(c, teamId, accountId)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Params("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetUser(c, teamId, accountId, userId)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Params("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.UpdateUser(c, teamId, accountId, userId)
}

// Version operation middleware
func (siw *ServerInterfaceWrapper) Version(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.Version(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/operators", wrapper.ListOperator)

	router.Post(options.BaseURL+"/operators", wrapper.CreateOperator)

	router.Delete(options.BaseURL+"/operators/:operatorId", wrapper.DeleteOperator)

	router.Get(options.BaseURL+"/operators/:operatorId", wrapper.GetOperator)

	router.Put(options.BaseURL+"/operators/:operatorId", wrapper.UpdateOperator)

	router.Get(options.BaseURL+"/operators/:operatorId/accounts", wrapper.ListOperatorAccounts)

	router.Post(options.BaseURL+"/operators/:operatorId/accounts", wrapper.CreateOperatorAccount)

	router.Get(options.BaseURL+"/operators/:operatorId/signing-keys", wrapper.ListOperatorSigningKeys)

	router.Post(options.BaseURL+"/operators/:operatorId/signing-keys", wrapper.CreateOperatorSigningKey)

	router.Get(options.BaseURL+"/systems", wrapper.ListSystems)

	router.Post(options.BaseURL+"/systems", wrapper.CreateSystem)

	router.Get(options.BaseURL+"/systems/:systemId", wrapper.GetSystem)

	router.Put(options.BaseURL+"/systems/:systemId", wrapper.UpdateSystem)

	router.Get(options.BaseURL+"/teams", wrapper.ListTeams)

	router.Post(options.BaseURL+"/teams", wrapper.CreateTeam)

	router.Get(options.BaseURL+"/teams/:teamId", wrapper.GetTeam)

	router.Get(options.BaseURL+"/teams/:teamId/accounts", wrapper.ListTeamAccounts)

	router.Get(options.BaseURL+"/teams/:teamId/accounts/:accountId", wrapper.GetAccount)

	router.Get(options.BaseURL+"/teams/:teamId/accounts/:accountId/groups", wrapper.ListGroups)

	router.Post(options.BaseURL+"/teams/:teamId/accounts/:accountId/groups", wrapper.CreateGroup)

	router.Get(options.BaseURL+"/teams/:teamId/accounts/:accountId/groups/:groupId", wrapper.GetGroup)

	router.Put(options.BaseURL+"/teams/:teamId/accounts/:accountId/groups/:groupId", wrapper.UpdateGroup)

	router.Get(options.BaseURL+"/teams/:teamId/accounts/:accountId/users", wrapper.ListUsers)

	router.Post(options.BaseURL+"/teams/:teamId/accounts/:accountId/users", wrapper.CreateUser)

	router.Get(options.BaseURL+"/teams/:teamId/accounts/:accountId/users/:userId", wrapper.GetUser)

	router.Put(options.BaseURL+"/teams/:teamId/accounts/:accountId/users/:userId", wrapper.UpdateUser)

	router.Get(options.BaseURL+"/version", wrapper.Version)

}

type ListOperatorRequestObject struct {
	Params ListOperatorParams
}

type ListOperatorResponseObject interface {
	VisitListOperatorResponse(ctx *fiber.Ctx) error
}

type ListOperator200JSONResponse struct {
	Limit   *float32    `json:"limit,omitempty"`
	Offset  *float32    `json:"offset,omitempty"`
	Results *[]Operator `json:"results,omitempty"`
	Total   *float32    `json:"total,omitempty"`
}

func (response ListOperator200JSONResponse) VisitListOperatorResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateOperatorRequestObject struct {
	Body *CreateOperatorJSONRequestBody
}

type CreateOperatorResponseObject interface {
	VisitCreateOperatorResponse(ctx *fiber.Ctx) error
}

type CreateOperator201JSONResponse Operator

func (response CreateOperator201JSONResponse) VisitCreateOperatorResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type DeleteOperatorRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
}

type DeleteOperatorResponseObject interface {
	VisitDeleteOperatorResponse(ctx *fiber.Ctx) error
}

type DeleteOperator204Response struct {
}

func (response DeleteOperator204Response) VisitDeleteOperatorResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type GetOperatorRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
}

type GetOperatorResponseObject interface {
	VisitGetOperatorResponse(ctx *fiber.Ctx) error
}

type GetOperator200JSONResponse Operator

func (response GetOperator200JSONResponse) VisitGetOperatorResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateOperatorRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	Body       *UpdateOperatorJSONRequestBody
}

type UpdateOperatorResponseObject interface {
	VisitUpdateOperatorResponse(ctx *fiber.Ctx) error
}

type UpdateOperator200JSONResponse Operator

func (response UpdateOperator200JSONResponse) VisitUpdateOperatorResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListOperatorAccountsRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	Params     ListOperatorAccountsParams
}

type ListOperatorAccountsResponseObject interface {
	VisitListOperatorAccountsResponse(ctx *fiber.Ctx) error
}

type ListOperatorAccounts200JSONResponse struct {
	Limit   *float32   `json:"limit,omitempty"`
	Offset  *float32   `json:"offset,omitempty"`
	Results *[]Account `json:"results,omitempty"`
	Total   *float32   `json:"total,omitempty"`
}

func (response ListOperatorAccounts200JSONResponse) VisitListOperatorAccountsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateOperatorAccountRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	Body       *CreateOperatorAccountJSONRequestBody
}

type CreateOperatorAccountResponseObject interface {
	VisitCreateOperatorAccountResponse(ctx *fiber.Ctx) error
}

type CreateOperatorAccount201JSONResponse Account

func (response CreateOperatorAccount201JSONResponse) VisitCreateOperatorAccountResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type ListOperatorSigningKeysRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	Params     ListOperatorSigningKeysParams
}

type ListOperatorSigningKeysResponseObject interface {
	VisitListOperatorSigningKeysResponse(ctx *fiber.Ctx) error
}

type ListOperatorSigningKeys200JSONResponse struct {
	Limit   *float32   `json:"limit,omitempty"`
	Offset  *float32   `json:"offset,omitempty"`
	Results *[]KeyPair `json:"results,omitempty"`
	Total   *float32   `json:"total,omitempty"`
}

func (response ListOperatorSigningKeys200JSONResponse) VisitListOperatorSigningKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateOperatorSigningKeyRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
}

type CreateOperatorSigningKeyResponseObject interface {
	VisitCreateOperatorSigningKeyResponse(ctx *fiber.Ctx) error
}

type CreateOperatorSigningKey201JSONResponse KeyPair

func (response CreateOperatorSigningKey201JSONResponse) VisitCreateOperatorSigningKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type ListSystemsRequestObject struct {
}

type ListSystemsResponseObject interface {
	VisitListSystemsResponse(ctx *fiber.Ctx) error
}

type ListSystems200JSONResponse struct {
	Limit   *float32  `json:"limit,omitempty"`
	Offset  *float32  `json:"offset,omitempty"`
	Results *[]System `json:"results,omitempty"`
	Total   *float32  `json:"total,omitempty"`
}

func (response ListSystems200JSONResponse) VisitListSystemsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateSystemRequestObject struct {
	Body *CreateSystemJSONRequestBody
}

type CreateSystemResponseObject interface {
	VisitCreateSystemResponse(ctx *fiber.Ctx) error
}

type CreateSystem201JSONResponse System

func (response CreateSystem201JSONResponse) VisitCreateSystemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type GetSystemRequestObject struct {
	SystemId string `json:"systemId"`
}

type GetSystemResponseObject interface {
	VisitGetSystemResponse(ctx *fiber.Ctx) error
}

type GetSystem200Response struct {
}

func (response GetSystem200Response) VisitGetSystemResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type UpdateSystemRequestObject struct {
	SystemId string `json:"systemId"`
	Body     *UpdateSystemJSONRequestBody
}

type UpdateSystemResponseObject interface {
	VisitUpdateSystemResponse(ctx *fiber.Ctx) error
}

type UpdateSystem200JSONResponse System

func (response UpdateSystem200JSONResponse) VisitUpdateSystemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListTeamsRequestObject struct {
	Params ListTeamsParams
}

type ListTeamsResponseObject interface {
	VisitListTeamsResponse(ctx *fiber.Ctx) error
}

type ListTeams200JSONResponse struct {
	Limit   *float32 `json:"limit,omitempty"`
	Offset  *float32 `json:"offset,omitempty"`
	Results *[]Team  `json:"results,omitempty"`
	Total   *float32 `json:"total,omitempty"`
}

func (response ListTeams200JSONResponse) VisitListTeamsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateTeamRequestObject struct {
	Body *CreateTeamJSONRequestBody
}

type CreateTeamResponseObject interface {
	VisitCreateTeamResponse(ctx *fiber.Ctx) error
}

type CreateTeam201JSONResponse Team

func (response CreateTeam201JSONResponse) VisitCreateTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type GetTeamRequestObject struct {
	TeamId TeamId `json:"teamId"`
}

type GetTeamResponseObject interface {
	VisitGetTeamResponse(ctx *fiber.Ctx) error
}

type GetTeam200JSONResponse Team

func (response GetTeam200JSONResponse) VisitGetTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListTeamAccountsRequestObject struct {
	TeamId TeamId `json:"teamId"`
	Params ListTeamAccountsParams
}

type ListTeamAccountsResponseObject interface {
	VisitListTeamAccountsResponse(ctx *fiber.Ctx) error
}

type ListTeamAccounts200JSONResponse struct {
	Limit   *float32   `json:"limit,omitempty"`
	Offset  *float32   `json:"offset,omitempty"`
	Results *[]Account `json:"results,omitempty"`
	Total   *float32   `json:"total,omitempty"`
}

func (response ListTeamAccounts200JSONResponse) VisitListTeamAccountsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetAccountRequestObject struct {
	TeamId    openapi_types.UUID `json:"teamId"`
	AccountId openapi_types.UUID `json:"accountId"`
}

type GetAccountResponseObject interface {
	VisitGetAccountResponse(ctx *fiber.Ctx) error
}

type GetAccount200JSONResponse Account

func (response GetAccount200JSONResponse) VisitGetAccountResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListGroupsRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	AccountId AccountId `json:"accountId"`
	Params    ListGroupsParams
}

type ListGroupsResponseObject interface {
	VisitListGroupsResponse(ctx *fiber.Ctx) error
}

type ListGroups200JSONResponse struct {
	Limit   *float32           `json:"limit,omitempty"`
	Offset  *float32           `json:"offset,omitempty"`
	Results *[]SigningKeyGroup `json:"results,omitempty"`
	Total   *float32           `json:"total,omitempty"`
}

func (response ListGroups200JSONResponse) VisitListGroupsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateGroupRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	AccountId AccountId `json:"accountId"`
	Body      *CreateGroupJSONRequestBody
}

type CreateGroupResponseObject interface {
	VisitCreateGroupResponse(ctx *fiber.Ctx) error
}

type CreateGroup201JSONResponse SigningKeyGroup

func (response CreateGroup201JSONResponse) VisitCreateGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type GetGroupRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	AccountId AccountId `json:"accountId"`
	GroupId   GroupId   `json:"groupId"`
}

type GetGroupResponseObject interface {
	VisitGetGroupResponse(ctx *fiber.Ctx) error
}

type GetGroup200JSONResponse SigningKeyGroup

func (response GetGroup200JSONResponse) VisitGetGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateGroupRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	AccountId AccountId `json:"accountId"`
	GroupId   GroupId   `json:"groupId"`
	Body      *UpdateGroupJSONRequestBody
}

type UpdateGroupResponseObject interface {
	VisitUpdateGroupResponse(ctx *fiber.Ctx) error
}

type UpdateGroup200JSONResponse SigningKeyGroup

func (response UpdateGroup200JSONResponse) VisitUpdateGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListUsersRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	AccountId AccountId `json:"accountId"`
	Params    ListUsersParams
}

type ListUsersResponseObject interface {
	VisitListUsersResponse(ctx *fiber.Ctx) error
}

type ListUsers200JSONResponse struct {
	Limit   *float32 `json:"limit,omitempty"`
	Offset  *float32 `json:"offset,omitempty"`
	Results *[]User  `json:"results,omitempty"`
	Total   *float32 `json:"total,omitempty"`
}

func (response ListUsers200JSONResponse) VisitListUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateUserRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	AccountId AccountId `json:"accountId"`
	Body      *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(ctx *fiber.Ctx) error
}

type CreateUser201JSONResponse User

func (response CreateUser201JSONResponse) VisitCreateUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type GetUserRequestObject struct {
	TeamId    TeamId             `json:"teamId"`
	AccountId AccountId          `json:"accountId"`
	UserId    openapi_types.UUID `json:"userId"`
}

type GetUserResponseObject interface {
	VisitGetUserResponse(ctx *fiber.Ctx) error
}

type GetUser200JSONResponse User

func (response GetUser200JSONResponse) VisitGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateUserRequestObject struct {
	TeamId    TeamId             `json:"teamId"`
	AccountId AccountId          `json:"accountId"`
	UserId    openapi_types.UUID `json:"userId"`
	Body      *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(ctx *fiber.Ctx) error
}

type UpdateUser200JSONResponse User

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type VersionRequestObject struct {
}

type VersionResponseObject interface {
	VisitVersionResponse(ctx *fiber.Ctx) error
}

type Version200JSONResponse Version

func (response Version200JSONResponse) VisitVersionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all operators
	// (GET /operators)
	ListOperator(ctx context.Context, request ListOperatorRequestObject) (ListOperatorResponseObject, error)
	// Creates a new operator
	// (POST /operators)
	CreateOperator(ctx context.Context, request CreateOperatorRequestObject) (CreateOperatorResponseObject, error)
	// Deletes an operator by ID
	// (DELETE /operators/{operatorId})
	DeleteOperator(ctx context.Context, request DeleteOperatorRequestObject) (DeleteOperatorResponseObject, error)
	// Gets an operator by ID
	// (GET /operators/{operatorId})
	GetOperator(ctx context.Context, request GetOperatorRequestObject) (GetOperatorResponseObject, error)
	// Updates an operator by ID
	// (PUT /operators/{operatorId})
	UpdateOperator(ctx context.Context, request UpdateOperatorRequestObject) (UpdateOperatorResponseObject, error)
	// List all accounts for an operator
	// (GET /operators/{operatorId}/accounts)
	ListOperatorAccounts(ctx context.Context, request ListOperatorAccountsRequestObject) (ListOperatorAccountsResponseObject, error)
	// Creates a new account
	// (POST /operators/{operatorId}/accounts)
	CreateOperatorAccount(ctx context.Context, request CreateOperatorAccountRequestObject) (CreateOperatorAccountResponseObject, error)
	// List all signing keys for an operator
	// (GET /operators/{operatorId}/signing-keys)
	ListOperatorSigningKeys(ctx context.Context, request ListOperatorSigningKeysRequestObject) (ListOperatorSigningKeysResponseObject, error)
	// Creates a new signing key
	// (POST /operators/{operatorId}/signing-keys)
	CreateOperatorSigningKey(ctx context.Context, request CreateOperatorSigningKeyRequestObject) (CreateOperatorSigningKeyResponseObject, error)
	// List all managed systems.
	// (GET /systems)
	ListSystems(ctx context.Context, request ListSystemsRequestObject) (ListSystemsResponseObject, error)
	// Creates a new system
	// (POST /systems)
	CreateSystem(ctx context.Context, request CreateSystemRequestObject) (CreateSystemResponseObject, error)
	// List all managed systems.
	// (GET /systems/{systemId})
	GetSystem(ctx context.Context, request GetSystemRequestObject) (GetSystemResponseObject, error)
	// Updates a system by ID
	// (PUT /systems/{systemId})
	UpdateSystem(ctx context.Context, request UpdateSystemRequestObject) (UpdateSystemResponseObject, error)
	// List all teams
	// (GET /teams)
	ListTeams(ctx context.Context, request ListTeamsRequestObject) (ListTeamsResponseObject, error)
	// Creates a new team
	// (POST /teams)
	CreateTeam(ctx context.Context, request CreateTeamRequestObject) (CreateTeamResponseObject, error)
	// Gets a team by ID
	// (GET /teams/{teamId})
	GetTeam(ctx context.Context, request GetTeamRequestObject) (GetTeamResponseObject, error)
	// List all accounts for a team
	// (GET /teams/{teamId}/accounts)
	ListTeamAccounts(ctx context.Context, request ListTeamAccountsRequestObject) (ListTeamAccountsResponseObject, error)
	// Gets an account by ID
	// (GET /teams/{teamId}/accounts/{accountId})
	GetAccount(ctx context.Context, request GetAccountRequestObject) (GetAccountResponseObject, error)
	// List all signing key groups for an account
	// (GET /teams/{teamId}/accounts/{accountId}/groups)
	ListGroups(ctx context.Context, request ListGroupsRequestObject) (ListGroupsResponseObject, error)
	// Creates a new signing key group
	// (POST /teams/{teamId}/accounts/{accountId}/groups)
	CreateGroup(ctx context.Context, request CreateGroupRequestObject) (CreateGroupResponseObject, error)
	// Gets a signing key group by ID
	// (GET /teams/{teamId}/accounts/{accountId}/groups/{groupId})
	GetGroup(ctx context.Context, request GetGroupRequestObject) (GetGroupResponseObject, error)
	// Updates a signing key group by ID
	// (PUT /teams/{teamId}/accounts/{accountId}/groups/{groupId})
	UpdateGroup(ctx context.Context, request UpdateGroupRequestObject) (UpdateGroupResponseObject, error)
	// List all users for an account
	// (GET /teams/{teamId}/accounts/{accountId}/users)
	ListUsers(ctx context.Context, request ListUsersRequestObject) (ListUsersResponseObject, error)
	// Creates a new user
	// (POST /teams/{teamId}/accounts/{accountId}/users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Gets a user by ID
	// (GET /teams/{teamId}/accounts/{accountId}/users/{userId})
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// Updates a user by ID
	// (PUT /teams/{teamId}/accounts/{accountId}/users/{userId})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
	// Returns the current version of the API.
	// (GET /version)
	Version(ctx context.Context, request VersionRequestObject) (VersionResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListOperator operation middleware
func (sh *strictHandler) ListOperator(ctx *fiber.Ctx, params ListOperatorParams) error {
	var request ListOperatorRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListOperator(ctx.UserContext(), request.(ListOperatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListOperator")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListOperatorResponseObject); ok {
		if err := validResponse.VisitListOperatorResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateOperator operation middleware
func (sh *strictHandler) CreateOperator(ctx *fiber.Ctx) error {
	var request CreateOperatorRequestObject

	var body CreateOperatorJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOperator(ctx.UserContext(), request.(CreateOperatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOperator")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateOperatorResponseObject); ok {
		if err := validResponse.VisitCreateOperatorResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteOperator operation middleware
func (sh *strictHandler) DeleteOperator(ctx *fiber.Ctx, operatorId OperatorId) error {
	var request DeleteOperatorRequestObject

	request.OperatorId = operatorId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOperator(ctx.UserContext(), request.(DeleteOperatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOperator")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteOperatorResponseObject); ok {
		if err := validResponse.VisitDeleteOperatorResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOperator operation middleware
func (sh *strictHandler) GetOperator(ctx *fiber.Ctx, operatorId OperatorId) error {
	var request GetOperatorRequestObject

	request.OperatorId = operatorId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetOperator(ctx.UserContext(), request.(GetOperatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOperator")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetOperatorResponseObject); ok {
		if err := validResponse.VisitGetOperatorResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateOperator operation middleware
func (sh *strictHandler) UpdateOperator(ctx *fiber.Ctx, operatorId OperatorId) error {
	var request UpdateOperatorRequestObject

	request.OperatorId = operatorId

	var body UpdateOperatorJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateOperator(ctx.UserContext(), request.(UpdateOperatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateOperator")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateOperatorResponseObject); ok {
		if err := validResponse.VisitUpdateOperatorResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListOperatorAccounts operation middleware
func (sh *strictHandler) ListOperatorAccounts(ctx *fiber.Ctx, operatorId OperatorId, params ListOperatorAccountsParams) error {
	var request ListOperatorAccountsRequestObject

	request.OperatorId = operatorId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListOperatorAccounts(ctx.UserContext(), request.(ListOperatorAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListOperatorAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListOperatorAccountsResponseObject); ok {
		if err := validResponse.VisitListOperatorAccountsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateOperatorAccount operation middleware
func (sh *strictHandler) CreateOperatorAccount(ctx *fiber.Ctx, operatorId OperatorId) error {
	var request CreateOperatorAccountRequestObject

	request.OperatorId = operatorId

	var body CreateOperatorAccountJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOperatorAccount(ctx.UserContext(), request.(CreateOperatorAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOperatorAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateOperatorAccountResponseObject); ok {
		if err := validResponse.VisitCreateOperatorAccountResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListOperatorSigningKeys operation middleware
func (sh *strictHandler) ListOperatorSigningKeys(ctx *fiber.Ctx, operatorId OperatorId, params ListOperatorSigningKeysParams) error {
	var request ListOperatorSigningKeysRequestObject

	request.OperatorId = operatorId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListOperatorSigningKeys(ctx.UserContext(), request.(ListOperatorSigningKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListOperatorSigningKeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListOperatorSigningKeysResponseObject); ok {
		if err := validResponse.VisitListOperatorSigningKeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateOperatorSigningKey operation middleware
func (sh *strictHandler) CreateOperatorSigningKey(ctx *fiber.Ctx, operatorId OperatorId) error {
	var request CreateOperatorSigningKeyRequestObject

	request.OperatorId = operatorId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOperatorSigningKey(ctx.UserContext(), request.(CreateOperatorSigningKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOperatorSigningKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateOperatorSigningKeyResponseObject); ok {
		if err := validResponse.VisitCreateOperatorSigningKeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListSystems operation middleware
func (sh *strictHandler) ListSystems(ctx *fiber.Ctx) error {
	var request ListSystemsRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListSystems(ctx.UserContext(), request.(ListSystemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListSystems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListSystemsResponseObject); ok {
		if err := validResponse.VisitListSystemsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateSystem operation middleware
func (sh *strictHandler) CreateSystem(ctx *fiber.Ctx) error {
	var request CreateSystemRequestObject

	var body CreateSystemJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSystem(ctx.UserContext(), request.(CreateSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateSystemResponseObject); ok {
		if err := validResponse.VisitCreateSystemResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSystem operation middleware
func (sh *strictHandler) GetSystem(ctx *fiber.Ctx, systemId string) error {
	var request GetSystemRequestObject

	request.SystemId = systemId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetSystem(ctx.UserContext(), request.(GetSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetSystemResponseObject); ok {
		if err := validResponse.VisitGetSystemResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateSystem operation middleware
func (sh *strictHandler) UpdateSystem(ctx *fiber.Ctx, systemId string) error {
	var request UpdateSystemRequestObject

	request.SystemId = systemId

	var body UpdateSystemJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSystem(ctx.UserContext(), request.(UpdateSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateSystemResponseObject); ok {
		if err := validResponse.VisitUpdateSystemResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListTeams operation middleware
func (sh *strictHandler) ListTeams(ctx *fiber.Ctx, params ListTeamsParams) error {
	var request ListTeamsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListTeams(ctx.UserContext(), request.(ListTeamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTeams")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListTeamsResponseObject); ok {
		if err := validResponse.VisitListTeamsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateTeam operation middleware
func (sh *strictHandler) CreateTeam(ctx *fiber.Ctx) error {
	var request CreateTeamRequestObject

	var body CreateTeamJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTeam(ctx.UserContext(), request.(CreateTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateTeamResponseObject); ok {
		if err := validResponse.VisitCreateTeamResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTeam operation middleware
func (sh *strictHandler) GetTeam(ctx *fiber.Ctx, teamId TeamId) error {
	var request GetTeamRequestObject

	request.TeamId = teamId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeam(ctx.UserContext(), request.(GetTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetTeamResponseObject); ok {
		if err := validResponse.VisitGetTeamResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListTeamAccounts operation middleware
func (sh *strictHandler) ListTeamAccounts(ctx *fiber.Ctx, teamId TeamId, params ListTeamAccountsParams) error {
	var request ListTeamAccountsRequestObject

	request.TeamId = teamId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListTeamAccounts(ctx.UserContext(), request.(ListTeamAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTeamAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListTeamAccountsResponseObject); ok {
		if err := validResponse.VisitListTeamAccountsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAccount operation middleware
func (sh *strictHandler) GetAccount(ctx *fiber.Ctx, teamId openapi_types.UUID, accountId openapi_types.UUID) error {
	var request GetAccountRequestObject

	request.TeamId = teamId
	request.AccountId = accountId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccount(ctx.UserContext(), request.(GetAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetAccountResponseObject); ok {
		if err := validResponse.VisitGetAccountResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListGroups operation middleware
func (sh *strictHandler) ListGroups(ctx *fiber.Ctx, teamId TeamId, accountId AccountId, params ListGroupsParams) error {
	var request ListGroupsRequestObject

	request.TeamId = teamId
	request.AccountId = accountId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListGroups(ctx.UserContext(), request.(ListGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListGroups")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListGroupsResponseObject); ok {
		if err := validResponse.VisitListGroupsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateGroup operation middleware
func (sh *strictHandler) CreateGroup(ctx *fiber.Ctx, teamId TeamId, accountId AccountId) error {
	var request CreateGroupRequestObject

	request.TeamId = teamId
	request.AccountId = accountId

	var body CreateGroupJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateGroup(ctx.UserContext(), request.(CreateGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateGroupResponseObject); ok {
		if err := validResponse.VisitCreateGroupResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetGroup operation middleware
func (sh *strictHandler) GetGroup(ctx *fiber.Ctx, teamId TeamId, accountId AccountId, groupId GroupId) error {
	var request GetGroupRequestObject

	request.TeamId = teamId
	request.AccountId = accountId
	request.GroupId = groupId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroup(ctx.UserContext(), request.(GetGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetGroupResponseObject); ok {
		if err := validResponse.VisitGetGroupResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateGroup operation middleware
func (sh *strictHandler) UpdateGroup(ctx *fiber.Ctx, teamId TeamId, accountId AccountId, groupId GroupId) error {
	var request UpdateGroupRequestObject

	request.TeamId = teamId
	request.AccountId = accountId
	request.GroupId = groupId

	var body UpdateGroupJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateGroup(ctx.UserContext(), request.(UpdateGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateGroupResponseObject); ok {
		if err := validResponse.VisitUpdateGroupResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListUsers operation middleware
func (sh *strictHandler) ListUsers(ctx *fiber.Ctx, teamId TeamId, accountId AccountId, params ListUsersParams) error {
	var request ListUsersRequestObject

	request.TeamId = teamId
	request.AccountId = accountId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListUsers(ctx.UserContext(), request.(ListUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListUsersResponseObject); ok {
		if err := validResponse.VisitListUsersResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx *fiber.Ctx, teamId TeamId, accountId AccountId) error {
	var request CreateUserRequestObject

	request.TeamId = teamId
	request.AccountId = accountId

	var body CreateUserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx.UserContext(), request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx *fiber.Ctx, teamId TeamId, accountId AccountId, userId openapi_types.UUID) error {
	var request GetUserRequestObject

	request.TeamId = teamId
	request.AccountId = accountId
	request.UserId = userId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx.UserContext(), request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		if err := validResponse.VisitGetUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(ctx *fiber.Ctx, teamId TeamId, accountId AccountId, userId openapi_types.UUID) error {
	var request UpdateUserRequestObject

	request.TeamId = teamId
	request.AccountId = accountId
	request.UserId = userId

	var body UpdateUserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx.UserContext(), request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		if err := validResponse.VisitUpdateUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Version operation middleware
func (sh *strictHandler) Version(ctx *fiber.Ctx) error {
	var request VersionRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Version(ctx.UserContext(), request.(VersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Version")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(VersionResponseObject); ok {
		if err := validResponse.VisitVersionResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
