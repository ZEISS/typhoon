// Package apis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package apis

import (
	"context"
	"fmt"
	"io"
	"net/url"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all operators
	// (GET /operators)
	ListOperator(c *fiber.Ctx, params ListOperatorParams) error
	// Creates a new operator
	// (POST /operators)
	CreateOperator(c *fiber.Ctx) error
	// Deletes an operator by ID
	// (DELETE /operators/{operatorId})
	DeleteOperator(c *fiber.Ctx, operatorId OperatorId) error
	// Gets an operator by ID
	// (GET /operators/{operatorId})
	GetOperator(c *fiber.Ctx, operatorId OperatorId) error
	// Updates an operator by ID
	// (PUT /operators/{operatorId})
	UpdateOperator(c *fiber.Ctx, operatorId OperatorId) error
	// List all accounts for an operator
	// (GET /operators/{operatorId}/accounts)
	ListOperatorAccounts(c *fiber.Ctx, operatorId OperatorId, params ListOperatorAccountsParams) error
	// Creates a new account
	// (POST /operators/{operatorId}/accounts)
	CreateOperatorAccount(c *fiber.Ctx, operatorId OperatorId) error
	// Deletes an account by ID
	// (DELETE /operators/{operatorId}/accounts/{accountId})
	DeleteOperatorAccount(c *fiber.Ctx, operatorId OperatorId, accountId AccountId) error
	// Gets an account by ID
	// (GET /operators/{operatorId}/accounts/{accountId})
	GetOperatorAccount(c *fiber.Ctx, operatorId OperatorId, accountId AccountId) error
	// Updates an account by ID
	// (PUT /operators/{operatorId}/accounts/{accountId})
	UpdateOperatorAccount(c *fiber.Ctx, operatorId OperatorId, accountId AccountId) error
	// List all signing keys for an account
	// (GET /operators/{operatorId}/accounts/{accountId}/signing-keys)
	ListOperatorAccountSigningKeys(c *fiber.Ctx, operatorId OperatorId, accountId AccountId, params ListOperatorAccountSigningKeysParams) error
	// Deletes a token for an account
	// (DELETE /operators/{operatorId}/accounts/{accountId}/token)
	DeleteOperatorAccountToken(c *fiber.Ctx, operatorId OperatorId, accountId AccountId) error
	// Gets a token for an account
	// (GET /operators/{operatorId}/accounts/{accountId}/token)
	GetOperatorAccountToken(c *fiber.Ctx, operatorId OperatorId, accountId AccountId) error
	// List all users for an account
	// (GET /operators/{operatorId}/accounts/{accountId}/users)
	ListOperatorAccountUsers(c *fiber.Ctx, operatorId OperatorId, accountId AccountId, params ListOperatorAccountUsersParams) error
	// Creates a new user
	// (POST /operators/{operatorId}/accounts/{accountId}/users)
	CreateOperatorAccountUser(c *fiber.Ctx, operatorId OperatorId, accountId AccountId) error
	// Gets a user by ID
	// (GET /operators/{operatorId}/accounts/{accountId}/users/{userId})
	GetOperatorAccountUser(c *fiber.Ctx, operatorId OperatorId, accountId AccountId, userId openapi_types.UUID) error
	// Gets the credentials for a user
	// (GET /operators/{operatorId}/accounts/{accountId}/users/{userId}/credentials)
	GetOperatorAccountUserCredentials(c *fiber.Ctx, operatorId OperatorId, accountId AccountId, userId UserId) error
	// Gets a token for a user
	// (GET /operators/{operatorId}/accounts/{accountId}/users/{userId}/token)
	GetOperatorAccountUserToken(c *fiber.Ctx, operatorId OperatorId, accountId AccountId, userId UserId) error
	// List all signing keys for an operator
	// (GET /operators/{operatorId}/signing-keys)
	ListOperatorSigningKeys(c *fiber.Ctx, operatorId OperatorId, params ListOperatorSigningKeysParams) error
	// Deletes a token for an operator
	// (DELETE /operators/{operatorId}/token)
	DeleteOperatorToken(c *fiber.Ctx, operatorId OperatorId) error
	// Gets a token for an operator
	// (GET /operators/{operatorId}/token)
	GetOperatorToken(c *fiber.Ctx, operatorId OperatorId) error
	// Updates a token for an operator
	// (PUT /operators/{operatorId}/token)
	UpdateOperatorToken(c *fiber.Ctx, operatorId OperatorId) error
	// List all managed systems.
	// (GET /systems)
	ListSystems(c *fiber.Ctx) error
	// Creates a new system
	// (POST /systems)
	CreateSystem(c *fiber.Ctx) error
	// Deletes a system by ID
	// (DELETE /systems/{systemId})
	DeleteSystem(c *fiber.Ctx, systemId SystemId) error
	// Gets a system by ID
	// (GET /systems/{systemId})
	GetSystem(c *fiber.Ctx, systemId SystemId) error
	// Updates a system by ID
	// (PUT /systems/{systemId})
	UpdateSystem(c *fiber.Ctx, systemId SystemId) error
	// Deletes the operator for a system
	// (DELETE /systems/{systemId}/operator)
	DeleteSystemOperator(c *fiber.Ctx, systemId SystemId) error
	// Gets the operator for a system
	// (GET /systems/{systemId}/operator)
	GetSystemOperator(c *fiber.Ctx, systemId SystemId) error
	// Updates the operator for a system
	// (PUT /systems/{systemId}/operator)
	UpdateSystemOperator(c *fiber.Ctx, systemId SystemId) error
	// List all teams
	// (GET /teams)
	ListTeams(c *fiber.Ctx, params ListTeamsParams) error
	// Creates a new team
	// (POST /teams)
	CreateTeam(c *fiber.Ctx) error
	// Deletes a team by ID
	// (DELETE /teams/{teamId})
	DeleteTeam(c *fiber.Ctx, teamId TeamId) error
	// Gets a team by ID
	// (GET /teams/{teamId})
	GetTeam(c *fiber.Ctx, teamId TeamId) error
	// List all accounts for a team
	// (GET /teams/{teamId}/accounts)
	ListTeamAccounts(c *fiber.Ctx, teamId TeamId, params ListTeamAccountsParams) error
	// Gets an account by ID
	// (GET /teams/{teamId}/accounts/{accountId})
	GetAccount(c *fiber.Ctx, teamId openapi_types.UUID, accountId openapi_types.UUID) error
	// List all signing key groups for an account
	// (GET /teams/{teamId}/accounts/{accountId}/groups)
	ListGroups(c *fiber.Ctx, teamId TeamId, accountId AccountId, params ListGroupsParams) error
	// Creates a new signing key group
	// (POST /teams/{teamId}/accounts/{accountId}/groups)
	CreateGroup(c *fiber.Ctx, teamId TeamId, accountId AccountId) error
	// Deletes a signing key group by ID
	// (DELETE /teams/{teamId}/accounts/{accountId}/groups/{groupId})
	DeleteSigningKeyGroup(c *fiber.Ctx, teamId TeamId, accountId AccountId, groupId GroupId) error
	// Gets a signing key group by ID
	// (GET /teams/{teamId}/accounts/{accountId}/groups/{groupId})
	GetGroup(c *fiber.Ctx, teamId TeamId, accountId AccountId, groupId GroupId) error
	// Updates a signing key group by ID
	// (PUT /teams/{teamId}/accounts/{accountId}/groups/{groupId})
	UpdateGroup(c *fiber.Ctx, teamId TeamId, accountId AccountId, groupId GroupId) error
	// List all users for an account
	// (GET /teams/{teamId}/accounts/{accountId}/users)
	ListUsers(c *fiber.Ctx, teamId TeamId, accountId AccountId, params ListUsersParams) error
	// Creates a new user
	// (POST /teams/{teamId}/accounts/{accountId}/users)
	CreateUser(c *fiber.Ctx, teamId TeamId, accountId AccountId) error
	// Deletes a user by ID
	// (DELETE /teams/{teamId}/accounts/{accountId}/users/{userId})
	DeleteTeamAccountUser(c *fiber.Ctx, teamId TeamId, accountId AccountId, userId UserId) error
	// Gets a user by ID
	// (GET /teams/{teamId}/accounts/{accountId}/users/{userId})
	GetUser(c *fiber.Ctx, teamId TeamId, accountId AccountId, userId UserId) error
	// Updates a user by ID
	// (PUT /teams/{teamId}/accounts/{accountId}/users/{userId})
	UpdateUser(c *fiber.Ctx, teamId TeamId, accountId AccountId, userId UserId) error
	// Returns the current version of the API.
	// (GET /version)
	Version(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// ListOperator operation middleware
func (siw *ServerInterfaceWrapper) ListOperator(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{"read:operators"})

	c.Context().SetUserValue(ApiKeyScopes, []string{"superadmin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListOperatorParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.ListOperator(c, params)
}

// CreateOperator operation middleware
func (siw *ServerInterfaceWrapper) CreateOperator(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.CreateOperator(c)
}

// DeleteOperator operation middleware
func (siw *ServerInterfaceWrapper) DeleteOperator(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.DeleteOperator(c, operatorId)
}

// GetOperator operation middleware
func (siw *ServerInterfaceWrapper) GetOperator(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.GetOperator(c, operatorId)
}

// UpdateOperator operation middleware
func (siw *ServerInterfaceWrapper) UpdateOperator(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.UpdateOperator(c, operatorId)
}

// ListOperatorAccounts operation middleware
func (siw *ServerInterfaceWrapper) ListOperatorAccounts(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{"read:accounts"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListOperatorAccountsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.ListOperatorAccounts(c, operatorId, params)
}

// CreateOperatorAccount operation middleware
func (siw *ServerInterfaceWrapper) CreateOperatorAccount(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.CreateOperatorAccount(c, operatorId)
}

// DeleteOperatorAccount operation middleware
func (siw *ServerInterfaceWrapper) DeleteOperatorAccount(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.DeleteOperatorAccount(c, operatorId, accountId)
}

// GetOperatorAccount operation middleware
func (siw *ServerInterfaceWrapper) GetOperatorAccount(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.GetOperatorAccount(c, operatorId, accountId)
}

// UpdateOperatorAccount operation middleware
func (siw *ServerInterfaceWrapper) UpdateOperatorAccount(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.UpdateOperatorAccount(c, operatorId, accountId)
}

// ListOperatorAccountSigningKeys operation middleware
func (siw *ServerInterfaceWrapper) ListOperatorAccountSigningKeys(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{"read:signing-keys"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListOperatorAccountSigningKeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.ListOperatorAccountSigningKeys(c, operatorId, accountId, params)
}

// DeleteOperatorAccountToken operation middleware
func (siw *ServerInterfaceWrapper) DeleteOperatorAccountToken(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.DeleteOperatorAccountToken(c, operatorId, accountId)
}

// GetOperatorAccountToken operation middleware
func (siw *ServerInterfaceWrapper) GetOperatorAccountToken(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.GetOperatorAccountToken(c, operatorId, accountId)
}

// ListOperatorAccountUsers operation middleware
func (siw *ServerInterfaceWrapper) ListOperatorAccountUsers(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{"read:users"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListOperatorAccountUsersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.ListOperatorAccountUsers(c, operatorId, accountId, params)
}

// CreateOperatorAccountUser operation middleware
func (siw *ServerInterfaceWrapper) CreateOperatorAccountUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.CreateOperatorAccountUser(c, operatorId, accountId)
}

// GetOperatorAccountUser operation middleware
func (siw *ServerInterfaceWrapper) GetOperatorAccountUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Params("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.GetOperatorAccountUser(c, operatorId, accountId, userId)
}

// GetOperatorAccountUserCredentials operation middleware
func (siw *ServerInterfaceWrapper) GetOperatorAccountUserCredentials(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Params("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.GetOperatorAccountUserCredentials(c, operatorId, accountId, userId)
}

// GetOperatorAccountUserToken operation middleware
func (siw *ServerInterfaceWrapper) GetOperatorAccountUserToken(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Params("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.GetOperatorAccountUserToken(c, operatorId, accountId, userId)
}

// ListOperatorSigningKeys operation middleware
func (siw *ServerInterfaceWrapper) ListOperatorSigningKeys(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{"read:signing-keys"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListOperatorSigningKeysParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.ListOperatorSigningKeys(c, operatorId, params)
}

// DeleteOperatorToken operation middleware
func (siw *ServerInterfaceWrapper) DeleteOperatorToken(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.DeleteOperatorToken(c, operatorId)
}

// GetOperatorToken operation middleware
func (siw *ServerInterfaceWrapper) GetOperatorToken(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.GetOperatorToken(c, operatorId)
}

// UpdateOperatorToken operation middleware
func (siw *ServerInterfaceWrapper) UpdateOperatorToken(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "operatorId" -------------
	var operatorId OperatorId

	err = runtime.BindStyledParameterWithOptions("simple", "operatorId", c.Params("operatorId"), &operatorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter operatorId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.UpdateOperatorToken(c, operatorId)
}

// ListSystems operation middleware
func (siw *ServerInterfaceWrapper) ListSystems(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.ListSystems(c)
}

// CreateSystem operation middleware
func (siw *ServerInterfaceWrapper) CreateSystem(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.CreateSystem(c)
}

// DeleteSystem operation middleware
func (siw *ServerInterfaceWrapper) DeleteSystem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "systemId" -------------
	var systemId SystemId

	err = runtime.BindStyledParameterWithOptions("simple", "systemId", c.Params("systemId"), &systemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter systemId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.DeleteSystem(c, systemId)
}

// GetSystem operation middleware
func (siw *ServerInterfaceWrapper) GetSystem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "systemId" -------------
	var systemId SystemId

	err = runtime.BindStyledParameterWithOptions("simple", "systemId", c.Params("systemId"), &systemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter systemId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.GetSystem(c, systemId)
}

// UpdateSystem operation middleware
func (siw *ServerInterfaceWrapper) UpdateSystem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "systemId" -------------
	var systemId SystemId

	err = runtime.BindStyledParameterWithOptions("simple", "systemId", c.Params("systemId"), &systemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter systemId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.UpdateSystem(c, systemId)
}

// DeleteSystemOperator operation middleware
func (siw *ServerInterfaceWrapper) DeleteSystemOperator(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "systemId" -------------
	var systemId SystemId

	err = runtime.BindStyledParameterWithOptions("simple", "systemId", c.Params("systemId"), &systemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter systemId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.DeleteSystemOperator(c, systemId)
}

// GetSystemOperator operation middleware
func (siw *ServerInterfaceWrapper) GetSystemOperator(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "systemId" -------------
	var systemId SystemId

	err = runtime.BindStyledParameterWithOptions("simple", "systemId", c.Params("systemId"), &systemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter systemId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.GetSystemOperator(c, systemId)
}

// UpdateSystemOperator operation middleware
func (siw *ServerInterfaceWrapper) UpdateSystemOperator(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "systemId" -------------
	var systemId SystemId

	err = runtime.BindStyledParameterWithOptions("simple", "systemId", c.Params("systemId"), &systemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter systemId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.UpdateSystemOperator(c, systemId)
}

// ListTeams operation middleware
func (siw *ServerInterfaceWrapper) ListTeams(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{"read:teams"})

	c.Context().SetUserValue(ApiKeyScopes, []string{"superadmin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.ListTeams(c, params)
}

// CreateTeam operation middleware
func (siw *ServerInterfaceWrapper) CreateTeam(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.CreateTeam(c)
}

// DeleteTeam operation middleware
func (siw *ServerInterfaceWrapper) DeleteTeam(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{"delete"})

	c.Context().SetUserValue(ApiKeyScopes, []string{"delete"})

	return siw.Handler.DeleteTeam(c, teamId)
}

// GetTeam operation middleware
func (siw *ServerInterfaceWrapper) GetTeam(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{"superadmin"})

	c.Context().SetUserValue(ApiKeyScopes, []string{"superadmin"})

	return siw.Handler.GetTeam(c, teamId)
}

// ListTeamAccounts operation middleware
func (siw *ServerInterfaceWrapper) ListTeamAccounts(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{"read:accounts"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamAccountsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.ListTeamAccounts(c, teamId, params)
}

// GetAccount operation middleware
func (siw *ServerInterfaceWrapper) GetAccount(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.GetAccount(c, teamId, accountId)
}

// ListGroups operation middleware
func (siw *ServerInterfaceWrapper) ListGroups(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{"read:groups"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGroupsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.ListGroups(c, teamId, accountId, params)
}

// CreateGroup operation middleware
func (siw *ServerInterfaceWrapper) CreateGroup(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.CreateGroup(c, teamId, accountId)
}

// DeleteSigningKeyGroup operation middleware
func (siw *ServerInterfaceWrapper) DeleteSigningKeyGroup(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	// ------------- Path parameter "groupId" -------------
	var groupId GroupId

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Params("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter groupId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.DeleteSigningKeyGroup(c, teamId, accountId, groupId)
}

// GetGroup operation middleware
func (siw *ServerInterfaceWrapper) GetGroup(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	// ------------- Path parameter "groupId" -------------
	var groupId GroupId

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Params("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter groupId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.GetGroup(c, teamId, accountId, groupId)
}

// UpdateGroup operation middleware
func (siw *ServerInterfaceWrapper) UpdateGroup(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	// ------------- Path parameter "groupId" -------------
	var groupId GroupId

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", c.Params("groupId"), &groupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter groupId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.UpdateGroup(c, teamId, accountId, groupId)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{"read:users"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.ListUsers(c, teamId, accountId, params)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.CreateUser(c, teamId, accountId)
}

// DeleteTeamAccountUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteTeamAccountUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Params("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.DeleteTeamAccountUser(c, teamId, accountId, userId)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Params("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.GetUser(c, teamId, accountId, userId)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "accountId" -------------
	var accountId AccountId

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", c.Params("accountId"), &accountId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter accountId: %w", err).Error())
	}

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Params("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.UpdateUser(c, teamId, accountId, userId)
}

// Version operation middleware
func (siw *ServerInterfaceWrapper) Version(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	c.Context().SetUserValue(ApiKeyScopes, []string{})

	return siw.Handler.Version(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/operators", wrapper.ListOperator)

	router.Post(options.BaseURL+"/operators", wrapper.CreateOperator)

	router.Delete(options.BaseURL+"/operators/:operatorId", wrapper.DeleteOperator)

	router.Get(options.BaseURL+"/operators/:operatorId", wrapper.GetOperator)

	router.Put(options.BaseURL+"/operators/:operatorId", wrapper.UpdateOperator)

	router.Get(options.BaseURL+"/operators/:operatorId/accounts", wrapper.ListOperatorAccounts)

	router.Post(options.BaseURL+"/operators/:operatorId/accounts", wrapper.CreateOperatorAccount)

	router.Delete(options.BaseURL+"/operators/:operatorId/accounts/:accountId", wrapper.DeleteOperatorAccount)

	router.Get(options.BaseURL+"/operators/:operatorId/accounts/:accountId", wrapper.GetOperatorAccount)

	router.Put(options.BaseURL+"/operators/:operatorId/accounts/:accountId", wrapper.UpdateOperatorAccount)

	router.Get(options.BaseURL+"/operators/:operatorId/accounts/:accountId/signing-keys", wrapper.ListOperatorAccountSigningKeys)

	router.Delete(options.BaseURL+"/operators/:operatorId/accounts/:accountId/token", wrapper.DeleteOperatorAccountToken)

	router.Get(options.BaseURL+"/operators/:operatorId/accounts/:accountId/token", wrapper.GetOperatorAccountToken)

	router.Get(options.BaseURL+"/operators/:operatorId/accounts/:accountId/users", wrapper.ListOperatorAccountUsers)

	router.Post(options.BaseURL+"/operators/:operatorId/accounts/:accountId/users", wrapper.CreateOperatorAccountUser)

	router.Get(options.BaseURL+"/operators/:operatorId/accounts/:accountId/users/:userId", wrapper.GetOperatorAccountUser)

	router.Get(options.BaseURL+"/operators/:operatorId/accounts/:accountId/users/:userId/credentials", wrapper.GetOperatorAccountUserCredentials)

	router.Get(options.BaseURL+"/operators/:operatorId/accounts/:accountId/users/:userId/token", wrapper.GetOperatorAccountUserToken)

	router.Get(options.BaseURL+"/operators/:operatorId/signing-keys", wrapper.ListOperatorSigningKeys)

	router.Delete(options.BaseURL+"/operators/:operatorId/token", wrapper.DeleteOperatorToken)

	router.Get(options.BaseURL+"/operators/:operatorId/token", wrapper.GetOperatorToken)

	router.Put(options.BaseURL+"/operators/:operatorId/token", wrapper.UpdateOperatorToken)

	router.Get(options.BaseURL+"/systems", wrapper.ListSystems)

	router.Post(options.BaseURL+"/systems", wrapper.CreateSystem)

	router.Delete(options.BaseURL+"/systems/:systemId", wrapper.DeleteSystem)

	router.Get(options.BaseURL+"/systems/:systemId", wrapper.GetSystem)

	router.Put(options.BaseURL+"/systems/:systemId", wrapper.UpdateSystem)

	router.Delete(options.BaseURL+"/systems/:systemId/operator", wrapper.DeleteSystemOperator)

	router.Get(options.BaseURL+"/systems/:systemId/operator", wrapper.GetSystemOperator)

	router.Put(options.BaseURL+"/systems/:systemId/operator", wrapper.UpdateSystemOperator)

	router.Get(options.BaseURL+"/teams", wrapper.ListTeams)

	router.Post(options.BaseURL+"/teams", wrapper.CreateTeam)

	router.Delete(options.BaseURL+"/teams/:teamId", wrapper.DeleteTeam)

	router.Get(options.BaseURL+"/teams/:teamId", wrapper.GetTeam)

	router.Get(options.BaseURL+"/teams/:teamId/accounts", wrapper.ListTeamAccounts)

	router.Get(options.BaseURL+"/teams/:teamId/accounts/:accountId", wrapper.GetAccount)

	router.Get(options.BaseURL+"/teams/:teamId/accounts/:accountId/groups", wrapper.ListGroups)

	router.Post(options.BaseURL+"/teams/:teamId/accounts/:accountId/groups", wrapper.CreateGroup)

	router.Delete(options.BaseURL+"/teams/:teamId/accounts/:accountId/groups/:groupId", wrapper.DeleteSigningKeyGroup)

	router.Get(options.BaseURL+"/teams/:teamId/accounts/:accountId/groups/:groupId", wrapper.GetGroup)

	router.Put(options.BaseURL+"/teams/:teamId/accounts/:accountId/groups/:groupId", wrapper.UpdateGroup)

	router.Get(options.BaseURL+"/teams/:teamId/accounts/:accountId/users", wrapper.ListUsers)

	router.Post(options.BaseURL+"/teams/:teamId/accounts/:accountId/users", wrapper.CreateUser)

	router.Delete(options.BaseURL+"/teams/:teamId/accounts/:accountId/users/:userId", wrapper.DeleteTeamAccountUser)

	router.Get(options.BaseURL+"/teams/:teamId/accounts/:accountId/users/:userId", wrapper.GetUser)

	router.Put(options.BaseURL+"/teams/:teamId/accounts/:accountId/users/:userId", wrapper.UpdateUser)

	router.Get(options.BaseURL+"/version", wrapper.Version)

}

type BadRequestJSONResponse Error

type DuplicateJSONResponse Error

type InternalErrorJSONResponse Error

type NotFoundJSONResponse Error

type UnauthorizedJSONResponse Error

type UnimplementedJSONResponse Error

type ListOperatorRequestObject struct {
	Params ListOperatorParams
}

type ListOperatorResponseObject interface {
	VisitListOperatorResponse(ctx *fiber.Ctx) error
}

type ListOperator200JSONResponse struct {
	Limit   *float32    `json:"limit,omitempty"`
	Offset  *float32    `json:"offset,omitempty"`
	Results *[]Operator `json:"results,omitempty"`
	Total   *float32    `json:"total,omitempty"`
}

func (response ListOperator200JSONResponse) VisitListOperatorResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateOperatorRequestObject struct {
	Body *CreateOperatorJSONRequestBody
}

type CreateOperatorResponseObject interface {
	VisitCreateOperatorResponse(ctx *fiber.Ctx) error
}

type CreateOperator201JSONResponse Operator

func (response CreateOperator201JSONResponse) VisitCreateOperatorResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type DeleteOperatorRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
}

type DeleteOperatorResponseObject interface {
	VisitDeleteOperatorResponse(ctx *fiber.Ctx) error
}

type DeleteOperator204Response struct {
}

func (response DeleteOperator204Response) VisitDeleteOperatorResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type GetOperatorRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
}

type GetOperatorResponseObject interface {
	VisitGetOperatorResponse(ctx *fiber.Ctx) error
}

type GetOperator200JSONResponse Operator

func (response GetOperator200JSONResponse) VisitGetOperatorResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetOperator401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetOperator401JSONResponse) VisitGetOperatorResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetOperator404JSONResponse struct{ NotFoundJSONResponse }

func (response GetOperator404JSONResponse) VisitGetOperatorResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetOperator501JSONResponse struct{ UnimplementedJSONResponse }

func (response GetOperator501JSONResponse) VisitGetOperatorResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(501)

	return ctx.JSON(&response)
}

type UpdateOperatorRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	Body       *UpdateOperatorJSONRequestBody
}

type UpdateOperatorResponseObject interface {
	VisitUpdateOperatorResponse(ctx *fiber.Ctx) error
}

type UpdateOperator200JSONResponse Operator

func (response UpdateOperator200JSONResponse) VisitUpdateOperatorResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListOperatorAccountsRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	Params     ListOperatorAccountsParams
}

type ListOperatorAccountsResponseObject interface {
	VisitListOperatorAccountsResponse(ctx *fiber.Ctx) error
}

type ListOperatorAccounts200JSONResponse struct {
	Limit   *float32   `json:"limit,omitempty"`
	Offset  *float32   `json:"offset,omitempty"`
	Results *[]Account `json:"results,omitempty"`
	Total   *float32   `json:"total,omitempty"`
}

func (response ListOperatorAccounts200JSONResponse) VisitListOperatorAccountsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateOperatorAccountRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	Body       *CreateOperatorAccountJSONRequestBody
}

type CreateOperatorAccountResponseObject interface {
	VisitCreateOperatorAccountResponse(ctx *fiber.Ctx) error
}

type CreateOperatorAccount201JSONResponse Account

func (response CreateOperatorAccount201JSONResponse) VisitCreateOperatorAccountResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type DeleteOperatorAccountRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	AccountId  AccountId  `json:"accountId"`
}

type DeleteOperatorAccountResponseObject interface {
	VisitDeleteOperatorAccountResponse(ctx *fiber.Ctx) error
}

type DeleteOperatorAccount204Response struct {
}

func (response DeleteOperatorAccount204Response) VisitDeleteOperatorAccountResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type GetOperatorAccountRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	AccountId  AccountId  `json:"accountId"`
}

type GetOperatorAccountResponseObject interface {
	VisitGetOperatorAccountResponse(ctx *fiber.Ctx) error
}

type GetOperatorAccount200JSONResponse Account

func (response GetOperatorAccount200JSONResponse) VisitGetOperatorAccountResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateOperatorAccountRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	AccountId  AccountId  `json:"accountId"`
	Body       *UpdateOperatorAccountJSONRequestBody
}

type UpdateOperatorAccountResponseObject interface {
	VisitUpdateOperatorAccountResponse(ctx *fiber.Ctx) error
}

type UpdateOperatorAccount200JSONResponse Account

func (response UpdateOperatorAccount200JSONResponse) VisitUpdateOperatorAccountResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListOperatorAccountSigningKeysRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	AccountId  AccountId  `json:"accountId"`
	Params     ListOperatorAccountSigningKeysParams
}

type ListOperatorAccountSigningKeysResponseObject interface {
	VisitListOperatorAccountSigningKeysResponse(ctx *fiber.Ctx) error
}

type ListOperatorAccountSigningKeys200JSONResponse struct {
	Limit   *float32   `json:"limit,omitempty"`
	Offset  *float32   `json:"offset,omitempty"`
	Results *[]KeyPair `json:"results,omitempty"`
	Total   *float32   `json:"total,omitempty"`
}

func (response ListOperatorAccountSigningKeys200JSONResponse) VisitListOperatorAccountSigningKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type DeleteOperatorAccountTokenRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	AccountId  AccountId  `json:"accountId"`
}

type DeleteOperatorAccountTokenResponseObject interface {
	VisitDeleteOperatorAccountTokenResponse(ctx *fiber.Ctx) error
}

type DeleteOperatorAccountToken204Response struct {
}

func (response DeleteOperatorAccountToken204Response) VisitDeleteOperatorAccountTokenResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type GetOperatorAccountTokenRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	AccountId  AccountId  `json:"accountId"`
}

type GetOperatorAccountTokenResponseObject interface {
	VisitGetOperatorAccountTokenResponse(ctx *fiber.Ctx) error
}

type GetOperatorAccountToken200JSONResponse JWTToken

func (response GetOperatorAccountToken200JSONResponse) VisitGetOperatorAccountTokenResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListOperatorAccountUsersRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	AccountId  AccountId  `json:"accountId"`
	Params     ListOperatorAccountUsersParams
}

type ListOperatorAccountUsersResponseObject interface {
	VisitListOperatorAccountUsersResponse(ctx *fiber.Ctx) error
}

type ListOperatorAccountUsers200JSONResponse struct {
	Limit   *float32 `json:"limit,omitempty"`
	Offset  *float32 `json:"offset,omitempty"`
	Results *[]User  `json:"results,omitempty"`
	Total   *float32 `json:"total,omitempty"`
}

func (response ListOperatorAccountUsers200JSONResponse) VisitListOperatorAccountUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateOperatorAccountUserRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	AccountId  AccountId  `json:"accountId"`
	Body       *CreateOperatorAccountUserJSONRequestBody
}

type CreateOperatorAccountUserResponseObject interface {
	VisitCreateOperatorAccountUserResponse(ctx *fiber.Ctx) error
}

type CreateOperatorAccountUser201JSONResponse User

func (response CreateOperatorAccountUser201JSONResponse) VisitCreateOperatorAccountUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type GetOperatorAccountUserRequestObject struct {
	OperatorId OperatorId         `json:"operatorId"`
	AccountId  AccountId          `json:"accountId"`
	UserId     openapi_types.UUID `json:"userId"`
}

type GetOperatorAccountUserResponseObject interface {
	VisitGetOperatorAccountUserResponse(ctx *fiber.Ctx) error
}

type GetOperatorAccountUser200JSONResponse User

func (response GetOperatorAccountUser200JSONResponse) VisitGetOperatorAccountUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetOperatorAccountUserCredentialsRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	AccountId  AccountId  `json:"accountId"`
	UserId     UserId     `json:"userId"`
}

type GetOperatorAccountUserCredentialsResponseObject interface {
	VisitGetOperatorAccountUserCredentialsResponse(ctx *fiber.Ctx) error
}

type GetOperatorAccountUserCredentials200ApplicationoctetStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetOperatorAccountUserCredentials200ApplicationoctetStreamResponse) VisitGetOperatorAccountUserCredentialsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		ctx.Response().Header.Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.Status(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.Response().BodyWriter(), response.Body)
	return err
}

type GetOperatorAccountUserTokenRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	AccountId  AccountId  `json:"accountId"`
	UserId     UserId     `json:"userId"`
}

type GetOperatorAccountUserTokenResponseObject interface {
	VisitGetOperatorAccountUserTokenResponse(ctx *fiber.Ctx) error
}

type GetOperatorAccountUserToken200JSONResponse JWTToken

func (response GetOperatorAccountUserToken200JSONResponse) VisitGetOperatorAccountUserTokenResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListOperatorSigningKeysRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
	Params     ListOperatorSigningKeysParams
}

type ListOperatorSigningKeysResponseObject interface {
	VisitListOperatorSigningKeysResponse(ctx *fiber.Ctx) error
}

type ListOperatorSigningKeys200JSONResponse struct {
	Limit   *float32   `json:"limit,omitempty"`
	Offset  *float32   `json:"offset,omitempty"`
	Results *[]KeyPair `json:"results,omitempty"`
	Total   *float32   `json:"total,omitempty"`
}

func (response ListOperatorSigningKeys200JSONResponse) VisitListOperatorSigningKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type DeleteOperatorTokenRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
}

type DeleteOperatorTokenResponseObject interface {
	VisitDeleteOperatorTokenResponse(ctx *fiber.Ctx) error
}

type DeleteOperatorToken204Response struct {
}

func (response DeleteOperatorToken204Response) VisitDeleteOperatorTokenResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type GetOperatorTokenRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
}

type GetOperatorTokenResponseObject interface {
	VisitGetOperatorTokenResponse(ctx *fiber.Ctx) error
}

type GetOperatorToken200JSONResponse JWTToken

func (response GetOperatorToken200JSONResponse) VisitGetOperatorTokenResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateOperatorTokenRequestObject struct {
	OperatorId OperatorId `json:"operatorId"`
}

type UpdateOperatorTokenResponseObject interface {
	VisitUpdateOperatorTokenResponse(ctx *fiber.Ctx) error
}

type UpdateOperatorToken200JSONResponse JWTToken

func (response UpdateOperatorToken200JSONResponse) VisitUpdateOperatorTokenResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListSystemsRequestObject struct {
}

type ListSystemsResponseObject interface {
	VisitListSystemsResponse(ctx *fiber.Ctx) error
}

type ListSystems200JSONResponse struct {
	Limit   *float32  `json:"limit,omitempty"`
	Offset  *float32  `json:"offset,omitempty"`
	Results *[]System `json:"results,omitempty"`
	Total   *float32  `json:"total,omitempty"`
}

func (response ListSystems200JSONResponse) VisitListSystemsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateSystemRequestObject struct {
	Body *CreateSystemJSONRequestBody
}

type CreateSystemResponseObject interface {
	VisitCreateSystemResponse(ctx *fiber.Ctx) error
}

type CreateSystem201JSONResponse System

func (response CreateSystem201JSONResponse) VisitCreateSystemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type DeleteSystemRequestObject struct {
	SystemId SystemId `json:"systemId"`
}

type DeleteSystemResponseObject interface {
	VisitDeleteSystemResponse(ctx *fiber.Ctx) error
}

type DeleteSystem204Response struct {
}

func (response DeleteSystem204Response) VisitDeleteSystemResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type GetSystemRequestObject struct {
	SystemId SystemId `json:"systemId"`
}

type GetSystemResponseObject interface {
	VisitGetSystemResponse(ctx *fiber.Ctx) error
}

type GetSystem200JSONResponse System

func (response GetSystem200JSONResponse) VisitGetSystemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetSystem401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetSystem401JSONResponse) VisitGetSystemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetSystem404JSONResponse struct{ NotFoundJSONResponse }

func (response GetSystem404JSONResponse) VisitGetSystemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetSystem501JSONResponse struct{ UnimplementedJSONResponse }

func (response GetSystem501JSONResponse) VisitGetSystemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(501)

	return ctx.JSON(&response)
}

type GetSystemdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSystemdefaultJSONResponse) VisitGetSystemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type UpdateSystemRequestObject struct {
	SystemId SystemId `json:"systemId"`
	Body     *UpdateSystemJSONRequestBody
}

type UpdateSystemResponseObject interface {
	VisitUpdateSystemResponse(ctx *fiber.Ctx) error
}

type UpdateSystem200JSONResponse System

func (response UpdateSystem200JSONResponse) VisitUpdateSystemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type DeleteSystemOperatorRequestObject struct {
	SystemId SystemId `json:"systemId"`
}

type DeleteSystemOperatorResponseObject interface {
	VisitDeleteSystemOperatorResponse(ctx *fiber.Ctx) error
}

type DeleteSystemOperator204Response struct {
}

func (response DeleteSystemOperator204Response) VisitDeleteSystemOperatorResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type GetSystemOperatorRequestObject struct {
	SystemId SystemId `json:"systemId"`
}

type GetSystemOperatorResponseObject interface {
	VisitGetSystemOperatorResponse(ctx *fiber.Ctx) error
}

type GetSystemOperator200JSONResponse Operator

func (response GetSystemOperator200JSONResponse) VisitGetSystemOperatorResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateSystemOperatorRequestObject struct {
	SystemId SystemId `json:"systemId"`
	Body     *UpdateSystemOperatorJSONRequestBody
}

type UpdateSystemOperatorResponseObject interface {
	VisitUpdateSystemOperatorResponse(ctx *fiber.Ctx) error
}

type UpdateSystemOperator200JSONResponse Operator

func (response UpdateSystemOperator200JSONResponse) VisitUpdateSystemOperatorResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListTeamsRequestObject struct {
	Params ListTeamsParams
}

type ListTeamsResponseObject interface {
	VisitListTeamsResponse(ctx *fiber.Ctx) error
}

type ListTeams200JSONResponse struct {
	Limit   *float32 `json:"limit,omitempty"`
	Offset  *float32 `json:"offset,omitempty"`
	Results *[]Team  `json:"results,omitempty"`
	Total   *float32 `json:"total,omitempty"`
}

func (response ListTeams200JSONResponse) VisitListTeamsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateTeamRequestObject struct {
	Body *CreateTeamJSONRequestBody
}

type CreateTeamResponseObject interface {
	VisitCreateTeamResponse(ctx *fiber.Ctx) error
}

type CreateTeam201JSONResponse Team

func (response CreateTeam201JSONResponse) VisitCreateTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type CreateTeam400JSONResponse struct{ BadRequestJSONResponse }

func (response CreateTeam400JSONResponse) VisitCreateTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type CreateTeam404JSONResponse struct{ NotFoundJSONResponse }

func (response CreateTeam404JSONResponse) VisitCreateTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type CreateTeam409JSONResponse struct{ DuplicateJSONResponse }

func (response CreateTeam409JSONResponse) VisitCreateTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(409)

	return ctx.JSON(&response)
}

type CreateTeam500JSONResponse struct{ InternalErrorJSONResponse }

func (response CreateTeam500JSONResponse) VisitCreateTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type CreateTeam501JSONResponse struct{ UnimplementedJSONResponse }

func (response CreateTeam501JSONResponse) VisitCreateTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(501)

	return ctx.JSON(&response)
}

type DeleteTeamRequestObject struct {
	TeamId TeamId `json:"teamId"`
}

type DeleteTeamResponseObject interface {
	VisitDeleteTeamResponse(ctx *fiber.Ctx) error
}

type DeleteTeam204Response struct {
}

func (response DeleteTeam204Response) VisitDeleteTeamResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteTeam401JSONResponse struct{ UnauthorizedJSONResponse }

func (response DeleteTeam401JSONResponse) VisitDeleteTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type DeleteTeam500JSONResponse struct{ InternalErrorJSONResponse }

func (response DeleteTeam500JSONResponse) VisitDeleteTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteTeam501JSONResponse struct{ UnimplementedJSONResponse }

func (response DeleteTeam501JSONResponse) VisitDeleteTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(501)

	return ctx.JSON(&response)
}

type GetTeamRequestObject struct {
	TeamId TeamId `json:"teamId"`
}

type GetTeamResponseObject interface {
	VisitGetTeamResponse(ctx *fiber.Ctx) error
}

type GetTeam200JSONResponse Team

func (response GetTeam200JSONResponse) VisitGetTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetTeam401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetTeam401JSONResponse) VisitGetTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetTeam404JSONResponse struct{ NotFoundJSONResponse }

func (response GetTeam404JSONResponse) VisitGetTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetTeam500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetTeam500JSONResponse) VisitGetTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetTeam501JSONResponse struct{ UnimplementedJSONResponse }

func (response GetTeam501JSONResponse) VisitGetTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(501)

	return ctx.JSON(&response)
}

type ListTeamAccountsRequestObject struct {
	TeamId TeamId `json:"teamId"`
	Params ListTeamAccountsParams
}

type ListTeamAccountsResponseObject interface {
	VisitListTeamAccountsResponse(ctx *fiber.Ctx) error
}

type ListTeamAccounts200JSONResponse struct {
	Limit   *float32   `json:"limit,omitempty"`
	Offset  *float32   `json:"offset,omitempty"`
	Results *[]Account `json:"results,omitempty"`
	Total   *float32   `json:"total,omitempty"`
}

func (response ListTeamAccounts200JSONResponse) VisitListTeamAccountsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetAccountRequestObject struct {
	TeamId    openapi_types.UUID `json:"teamId"`
	AccountId openapi_types.UUID `json:"accountId"`
}

type GetAccountResponseObject interface {
	VisitGetAccountResponse(ctx *fiber.Ctx) error
}

type GetAccount200JSONResponse Account

func (response GetAccount200JSONResponse) VisitGetAccountResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListGroupsRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	AccountId AccountId `json:"accountId"`
	Params    ListGroupsParams
}

type ListGroupsResponseObject interface {
	VisitListGroupsResponse(ctx *fiber.Ctx) error
}

type ListGroups200JSONResponse struct {
	Limit   *float32           `json:"limit,omitempty"`
	Offset  *float32           `json:"offset,omitempty"`
	Results *[]SigningKeyGroup `json:"results,omitempty"`
	Total   *float32           `json:"total,omitempty"`
}

func (response ListGroups200JSONResponse) VisitListGroupsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateGroupRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	AccountId AccountId `json:"accountId"`
	Body      *CreateGroupJSONRequestBody
}

type CreateGroupResponseObject interface {
	VisitCreateGroupResponse(ctx *fiber.Ctx) error
}

type CreateGroup201JSONResponse SigningKeyGroup

func (response CreateGroup201JSONResponse) VisitCreateGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type DeleteSigningKeyGroupRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	AccountId AccountId `json:"accountId"`
	GroupId   GroupId   `json:"groupId"`
}

type DeleteSigningKeyGroupResponseObject interface {
	VisitDeleteSigningKeyGroupResponse(ctx *fiber.Ctx) error
}

type DeleteSigningKeyGroup204Response struct {
}

func (response DeleteSigningKeyGroup204Response) VisitDeleteSigningKeyGroupResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type GetGroupRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	AccountId AccountId `json:"accountId"`
	GroupId   GroupId   `json:"groupId"`
}

type GetGroupResponseObject interface {
	VisitGetGroupResponse(ctx *fiber.Ctx) error
}

type GetGroup200JSONResponse SigningKeyGroup

func (response GetGroup200JSONResponse) VisitGetGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateGroupRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	AccountId AccountId `json:"accountId"`
	GroupId   GroupId   `json:"groupId"`
	Body      *UpdateGroupJSONRequestBody
}

type UpdateGroupResponseObject interface {
	VisitUpdateGroupResponse(ctx *fiber.Ctx) error
}

type UpdateGroup200JSONResponse SigningKeyGroup

func (response UpdateGroup200JSONResponse) VisitUpdateGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type ListUsersRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	AccountId AccountId `json:"accountId"`
	Params    ListUsersParams
}

type ListUsersResponseObject interface {
	VisitListUsersResponse(ctx *fiber.Ctx) error
}

type ListUsers200JSONResponse struct {
	Limit   *float32 `json:"limit,omitempty"`
	Offset  *float32 `json:"offset,omitempty"`
	Results *[]User  `json:"results,omitempty"`
	Total   *float32 `json:"total,omitempty"`
}

func (response ListUsers200JSONResponse) VisitListUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateUserRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	AccountId AccountId `json:"accountId"`
	Body      *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(ctx *fiber.Ctx) error
}

type CreateUser201JSONResponse User

func (response CreateUser201JSONResponse) VisitCreateUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type DeleteTeamAccountUserRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	AccountId AccountId `json:"accountId"`
	UserId    UserId    `json:"userId"`
}

type DeleteTeamAccountUserResponseObject interface {
	VisitDeleteTeamAccountUserResponse(ctx *fiber.Ctx) error
}

type DeleteTeamAccountUser204Response struct {
}

func (response DeleteTeamAccountUser204Response) VisitDeleteTeamAccountUserResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type GetUserRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	AccountId AccountId `json:"accountId"`
	UserId    UserId    `json:"userId"`
}

type GetUserResponseObject interface {
	VisitGetUserResponse(ctx *fiber.Ctx) error
}

type GetUser200JSONResponse User

func (response GetUser200JSONResponse) VisitGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateUserRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	AccountId AccountId `json:"accountId"`
	UserId    UserId    `json:"userId"`
	Body      *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(ctx *fiber.Ctx) error
}

type UpdateUser200JSONResponse User

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type VersionRequestObject struct {
}

type VersionResponseObject interface {
	VisitVersionResponse(ctx *fiber.Ctx) error
}

type Version200JSONResponse Version

func (response Version200JSONResponse) VisitVersionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type Version500JSONResponse struct{ InternalErrorJSONResponse }

func (response Version500JSONResponse) VisitVersionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type Version501JSONResponse struct{ UnimplementedJSONResponse }

func (response Version501JSONResponse) VisitVersionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(501)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all operators
	// (GET /operators)
	ListOperator(ctx context.Context, request ListOperatorRequestObject) (ListOperatorResponseObject, error)
	// Creates a new operator
	// (POST /operators)
	CreateOperator(ctx context.Context, request CreateOperatorRequestObject) (CreateOperatorResponseObject, error)
	// Deletes an operator by ID
	// (DELETE /operators/{operatorId})
	DeleteOperator(ctx context.Context, request DeleteOperatorRequestObject) (DeleteOperatorResponseObject, error)
	// Gets an operator by ID
	// (GET /operators/{operatorId})
	GetOperator(ctx context.Context, request GetOperatorRequestObject) (GetOperatorResponseObject, error)
	// Updates an operator by ID
	// (PUT /operators/{operatorId})
	UpdateOperator(ctx context.Context, request UpdateOperatorRequestObject) (UpdateOperatorResponseObject, error)
	// List all accounts for an operator
	// (GET /operators/{operatorId}/accounts)
	ListOperatorAccounts(ctx context.Context, request ListOperatorAccountsRequestObject) (ListOperatorAccountsResponseObject, error)
	// Creates a new account
	// (POST /operators/{operatorId}/accounts)
	CreateOperatorAccount(ctx context.Context, request CreateOperatorAccountRequestObject) (CreateOperatorAccountResponseObject, error)
	// Deletes an account by ID
	// (DELETE /operators/{operatorId}/accounts/{accountId})
	DeleteOperatorAccount(ctx context.Context, request DeleteOperatorAccountRequestObject) (DeleteOperatorAccountResponseObject, error)
	// Gets an account by ID
	// (GET /operators/{operatorId}/accounts/{accountId})
	GetOperatorAccount(ctx context.Context, request GetOperatorAccountRequestObject) (GetOperatorAccountResponseObject, error)
	// Updates an account by ID
	// (PUT /operators/{operatorId}/accounts/{accountId})
	UpdateOperatorAccount(ctx context.Context, request UpdateOperatorAccountRequestObject) (UpdateOperatorAccountResponseObject, error)
	// List all signing keys for an account
	// (GET /operators/{operatorId}/accounts/{accountId}/signing-keys)
	ListOperatorAccountSigningKeys(ctx context.Context, request ListOperatorAccountSigningKeysRequestObject) (ListOperatorAccountSigningKeysResponseObject, error)
	// Deletes a token for an account
	// (DELETE /operators/{operatorId}/accounts/{accountId}/token)
	DeleteOperatorAccountToken(ctx context.Context, request DeleteOperatorAccountTokenRequestObject) (DeleteOperatorAccountTokenResponseObject, error)
	// Gets a token for an account
	// (GET /operators/{operatorId}/accounts/{accountId}/token)
	GetOperatorAccountToken(ctx context.Context, request GetOperatorAccountTokenRequestObject) (GetOperatorAccountTokenResponseObject, error)
	// List all users for an account
	// (GET /operators/{operatorId}/accounts/{accountId}/users)
	ListOperatorAccountUsers(ctx context.Context, request ListOperatorAccountUsersRequestObject) (ListOperatorAccountUsersResponseObject, error)
	// Creates a new user
	// (POST /operators/{operatorId}/accounts/{accountId}/users)
	CreateOperatorAccountUser(ctx context.Context, request CreateOperatorAccountUserRequestObject) (CreateOperatorAccountUserResponseObject, error)
	// Gets a user by ID
	// (GET /operators/{operatorId}/accounts/{accountId}/users/{userId})
	GetOperatorAccountUser(ctx context.Context, request GetOperatorAccountUserRequestObject) (GetOperatorAccountUserResponseObject, error)
	// Gets the credentials for a user
	// (GET /operators/{operatorId}/accounts/{accountId}/users/{userId}/credentials)
	GetOperatorAccountUserCredentials(ctx context.Context, request GetOperatorAccountUserCredentialsRequestObject) (GetOperatorAccountUserCredentialsResponseObject, error)
	// Gets a token for a user
	// (GET /operators/{operatorId}/accounts/{accountId}/users/{userId}/token)
	GetOperatorAccountUserToken(ctx context.Context, request GetOperatorAccountUserTokenRequestObject) (GetOperatorAccountUserTokenResponseObject, error)
	// List all signing keys for an operator
	// (GET /operators/{operatorId}/signing-keys)
	ListOperatorSigningKeys(ctx context.Context, request ListOperatorSigningKeysRequestObject) (ListOperatorSigningKeysResponseObject, error)
	// Deletes a token for an operator
	// (DELETE /operators/{operatorId}/token)
	DeleteOperatorToken(ctx context.Context, request DeleteOperatorTokenRequestObject) (DeleteOperatorTokenResponseObject, error)
	// Gets a token for an operator
	// (GET /operators/{operatorId}/token)
	GetOperatorToken(ctx context.Context, request GetOperatorTokenRequestObject) (GetOperatorTokenResponseObject, error)
	// Updates a token for an operator
	// (PUT /operators/{operatorId}/token)
	UpdateOperatorToken(ctx context.Context, request UpdateOperatorTokenRequestObject) (UpdateOperatorTokenResponseObject, error)
	// List all managed systems.
	// (GET /systems)
	ListSystems(ctx context.Context, request ListSystemsRequestObject) (ListSystemsResponseObject, error)
	// Creates a new system
	// (POST /systems)
	CreateSystem(ctx context.Context, request CreateSystemRequestObject) (CreateSystemResponseObject, error)
	// Deletes a system by ID
	// (DELETE /systems/{systemId})
	DeleteSystem(ctx context.Context, request DeleteSystemRequestObject) (DeleteSystemResponseObject, error)
	// Gets a system by ID
	// (GET /systems/{systemId})
	GetSystem(ctx context.Context, request GetSystemRequestObject) (GetSystemResponseObject, error)
	// Updates a system by ID
	// (PUT /systems/{systemId})
	UpdateSystem(ctx context.Context, request UpdateSystemRequestObject) (UpdateSystemResponseObject, error)
	// Deletes the operator for a system
	// (DELETE /systems/{systemId}/operator)
	DeleteSystemOperator(ctx context.Context, request DeleteSystemOperatorRequestObject) (DeleteSystemOperatorResponseObject, error)
	// Gets the operator for a system
	// (GET /systems/{systemId}/operator)
	GetSystemOperator(ctx context.Context, request GetSystemOperatorRequestObject) (GetSystemOperatorResponseObject, error)
	// Updates the operator for a system
	// (PUT /systems/{systemId}/operator)
	UpdateSystemOperator(ctx context.Context, request UpdateSystemOperatorRequestObject) (UpdateSystemOperatorResponseObject, error)
	// List all teams
	// (GET /teams)
	ListTeams(ctx context.Context, request ListTeamsRequestObject) (ListTeamsResponseObject, error)
	// Creates a new team
	// (POST /teams)
	CreateTeam(ctx context.Context, request CreateTeamRequestObject) (CreateTeamResponseObject, error)
	// Deletes a team by ID
	// (DELETE /teams/{teamId})
	DeleteTeam(ctx context.Context, request DeleteTeamRequestObject) (DeleteTeamResponseObject, error)
	// Gets a team by ID
	// (GET /teams/{teamId})
	GetTeam(ctx context.Context, request GetTeamRequestObject) (GetTeamResponseObject, error)
	// List all accounts for a team
	// (GET /teams/{teamId}/accounts)
	ListTeamAccounts(ctx context.Context, request ListTeamAccountsRequestObject) (ListTeamAccountsResponseObject, error)
	// Gets an account by ID
	// (GET /teams/{teamId}/accounts/{accountId})
	GetAccount(ctx context.Context, request GetAccountRequestObject) (GetAccountResponseObject, error)
	// List all signing key groups for an account
	// (GET /teams/{teamId}/accounts/{accountId}/groups)
	ListGroups(ctx context.Context, request ListGroupsRequestObject) (ListGroupsResponseObject, error)
	// Creates a new signing key group
	// (POST /teams/{teamId}/accounts/{accountId}/groups)
	CreateGroup(ctx context.Context, request CreateGroupRequestObject) (CreateGroupResponseObject, error)
	// Deletes a signing key group by ID
	// (DELETE /teams/{teamId}/accounts/{accountId}/groups/{groupId})
	DeleteSigningKeyGroup(ctx context.Context, request DeleteSigningKeyGroupRequestObject) (DeleteSigningKeyGroupResponseObject, error)
	// Gets a signing key group by ID
	// (GET /teams/{teamId}/accounts/{accountId}/groups/{groupId})
	GetGroup(ctx context.Context, request GetGroupRequestObject) (GetGroupResponseObject, error)
	// Updates a signing key group by ID
	// (PUT /teams/{teamId}/accounts/{accountId}/groups/{groupId})
	UpdateGroup(ctx context.Context, request UpdateGroupRequestObject) (UpdateGroupResponseObject, error)
	// List all users for an account
	// (GET /teams/{teamId}/accounts/{accountId}/users)
	ListUsers(ctx context.Context, request ListUsersRequestObject) (ListUsersResponseObject, error)
	// Creates a new user
	// (POST /teams/{teamId}/accounts/{accountId}/users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Deletes a user by ID
	// (DELETE /teams/{teamId}/accounts/{accountId}/users/{userId})
	DeleteTeamAccountUser(ctx context.Context, request DeleteTeamAccountUserRequestObject) (DeleteTeamAccountUserResponseObject, error)
	// Gets a user by ID
	// (GET /teams/{teamId}/accounts/{accountId}/users/{userId})
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// Updates a user by ID
	// (PUT /teams/{teamId}/accounts/{accountId}/users/{userId})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
	// Returns the current version of the API.
	// (GET /version)
	Version(ctx context.Context, request VersionRequestObject) (VersionResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListOperator operation middleware
func (sh *strictHandler) ListOperator(ctx *fiber.Ctx, params ListOperatorParams) error {
	var request ListOperatorRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListOperator(ctx.UserContext(), request.(ListOperatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListOperator")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListOperatorResponseObject); ok {
		if err := validResponse.VisitListOperatorResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateOperator operation middleware
func (sh *strictHandler) CreateOperator(ctx *fiber.Ctx) error {
	var request CreateOperatorRequestObject

	var body CreateOperatorJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOperator(ctx.UserContext(), request.(CreateOperatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOperator")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateOperatorResponseObject); ok {
		if err := validResponse.VisitCreateOperatorResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteOperator operation middleware
func (sh *strictHandler) DeleteOperator(ctx *fiber.Ctx, operatorId OperatorId) error {
	var request DeleteOperatorRequestObject

	request.OperatorId = operatorId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOperator(ctx.UserContext(), request.(DeleteOperatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOperator")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteOperatorResponseObject); ok {
		if err := validResponse.VisitDeleteOperatorResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOperator operation middleware
func (sh *strictHandler) GetOperator(ctx *fiber.Ctx, operatorId OperatorId) error {
	var request GetOperatorRequestObject

	request.OperatorId = operatorId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetOperator(ctx.UserContext(), request.(GetOperatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOperator")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetOperatorResponseObject); ok {
		if err := validResponse.VisitGetOperatorResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateOperator operation middleware
func (sh *strictHandler) UpdateOperator(ctx *fiber.Ctx, operatorId OperatorId) error {
	var request UpdateOperatorRequestObject

	request.OperatorId = operatorId

	var body UpdateOperatorJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateOperator(ctx.UserContext(), request.(UpdateOperatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateOperator")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateOperatorResponseObject); ok {
		if err := validResponse.VisitUpdateOperatorResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListOperatorAccounts operation middleware
func (sh *strictHandler) ListOperatorAccounts(ctx *fiber.Ctx, operatorId OperatorId, params ListOperatorAccountsParams) error {
	var request ListOperatorAccountsRequestObject

	request.OperatorId = operatorId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListOperatorAccounts(ctx.UserContext(), request.(ListOperatorAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListOperatorAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListOperatorAccountsResponseObject); ok {
		if err := validResponse.VisitListOperatorAccountsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateOperatorAccount operation middleware
func (sh *strictHandler) CreateOperatorAccount(ctx *fiber.Ctx, operatorId OperatorId) error {
	var request CreateOperatorAccountRequestObject

	request.OperatorId = operatorId

	var body CreateOperatorAccountJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOperatorAccount(ctx.UserContext(), request.(CreateOperatorAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOperatorAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateOperatorAccountResponseObject); ok {
		if err := validResponse.VisitCreateOperatorAccountResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteOperatorAccount operation middleware
func (sh *strictHandler) DeleteOperatorAccount(ctx *fiber.Ctx, operatorId OperatorId, accountId AccountId) error {
	var request DeleteOperatorAccountRequestObject

	request.OperatorId = operatorId
	request.AccountId = accountId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOperatorAccount(ctx.UserContext(), request.(DeleteOperatorAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOperatorAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteOperatorAccountResponseObject); ok {
		if err := validResponse.VisitDeleteOperatorAccountResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOperatorAccount operation middleware
func (sh *strictHandler) GetOperatorAccount(ctx *fiber.Ctx, operatorId OperatorId, accountId AccountId) error {
	var request GetOperatorAccountRequestObject

	request.OperatorId = operatorId
	request.AccountId = accountId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetOperatorAccount(ctx.UserContext(), request.(GetOperatorAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOperatorAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetOperatorAccountResponseObject); ok {
		if err := validResponse.VisitGetOperatorAccountResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateOperatorAccount operation middleware
func (sh *strictHandler) UpdateOperatorAccount(ctx *fiber.Ctx, operatorId OperatorId, accountId AccountId) error {
	var request UpdateOperatorAccountRequestObject

	request.OperatorId = operatorId
	request.AccountId = accountId

	var body UpdateOperatorAccountJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateOperatorAccount(ctx.UserContext(), request.(UpdateOperatorAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateOperatorAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateOperatorAccountResponseObject); ok {
		if err := validResponse.VisitUpdateOperatorAccountResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListOperatorAccountSigningKeys operation middleware
func (sh *strictHandler) ListOperatorAccountSigningKeys(ctx *fiber.Ctx, operatorId OperatorId, accountId AccountId, params ListOperatorAccountSigningKeysParams) error {
	var request ListOperatorAccountSigningKeysRequestObject

	request.OperatorId = operatorId
	request.AccountId = accountId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListOperatorAccountSigningKeys(ctx.UserContext(), request.(ListOperatorAccountSigningKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListOperatorAccountSigningKeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListOperatorAccountSigningKeysResponseObject); ok {
		if err := validResponse.VisitListOperatorAccountSigningKeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteOperatorAccountToken operation middleware
func (sh *strictHandler) DeleteOperatorAccountToken(ctx *fiber.Ctx, operatorId OperatorId, accountId AccountId) error {
	var request DeleteOperatorAccountTokenRequestObject

	request.OperatorId = operatorId
	request.AccountId = accountId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOperatorAccountToken(ctx.UserContext(), request.(DeleteOperatorAccountTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOperatorAccountToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteOperatorAccountTokenResponseObject); ok {
		if err := validResponse.VisitDeleteOperatorAccountTokenResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOperatorAccountToken operation middleware
func (sh *strictHandler) GetOperatorAccountToken(ctx *fiber.Ctx, operatorId OperatorId, accountId AccountId) error {
	var request GetOperatorAccountTokenRequestObject

	request.OperatorId = operatorId
	request.AccountId = accountId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetOperatorAccountToken(ctx.UserContext(), request.(GetOperatorAccountTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOperatorAccountToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetOperatorAccountTokenResponseObject); ok {
		if err := validResponse.VisitGetOperatorAccountTokenResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListOperatorAccountUsers operation middleware
func (sh *strictHandler) ListOperatorAccountUsers(ctx *fiber.Ctx, operatorId OperatorId, accountId AccountId, params ListOperatorAccountUsersParams) error {
	var request ListOperatorAccountUsersRequestObject

	request.OperatorId = operatorId
	request.AccountId = accountId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListOperatorAccountUsers(ctx.UserContext(), request.(ListOperatorAccountUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListOperatorAccountUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListOperatorAccountUsersResponseObject); ok {
		if err := validResponse.VisitListOperatorAccountUsersResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateOperatorAccountUser operation middleware
func (sh *strictHandler) CreateOperatorAccountUser(ctx *fiber.Ctx, operatorId OperatorId, accountId AccountId) error {
	var request CreateOperatorAccountUserRequestObject

	request.OperatorId = operatorId
	request.AccountId = accountId

	var body CreateOperatorAccountUserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOperatorAccountUser(ctx.UserContext(), request.(CreateOperatorAccountUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOperatorAccountUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateOperatorAccountUserResponseObject); ok {
		if err := validResponse.VisitCreateOperatorAccountUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOperatorAccountUser operation middleware
func (sh *strictHandler) GetOperatorAccountUser(ctx *fiber.Ctx, operatorId OperatorId, accountId AccountId, userId openapi_types.UUID) error {
	var request GetOperatorAccountUserRequestObject

	request.OperatorId = operatorId
	request.AccountId = accountId
	request.UserId = userId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetOperatorAccountUser(ctx.UserContext(), request.(GetOperatorAccountUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOperatorAccountUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetOperatorAccountUserResponseObject); ok {
		if err := validResponse.VisitGetOperatorAccountUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOperatorAccountUserCredentials operation middleware
func (sh *strictHandler) GetOperatorAccountUserCredentials(ctx *fiber.Ctx, operatorId OperatorId, accountId AccountId, userId UserId) error {
	var request GetOperatorAccountUserCredentialsRequestObject

	request.OperatorId = operatorId
	request.AccountId = accountId
	request.UserId = userId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetOperatorAccountUserCredentials(ctx.UserContext(), request.(GetOperatorAccountUserCredentialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOperatorAccountUserCredentials")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetOperatorAccountUserCredentialsResponseObject); ok {
		if err := validResponse.VisitGetOperatorAccountUserCredentialsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOperatorAccountUserToken operation middleware
func (sh *strictHandler) GetOperatorAccountUserToken(ctx *fiber.Ctx, operatorId OperatorId, accountId AccountId, userId UserId) error {
	var request GetOperatorAccountUserTokenRequestObject

	request.OperatorId = operatorId
	request.AccountId = accountId
	request.UserId = userId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetOperatorAccountUserToken(ctx.UserContext(), request.(GetOperatorAccountUserTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOperatorAccountUserToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetOperatorAccountUserTokenResponseObject); ok {
		if err := validResponse.VisitGetOperatorAccountUserTokenResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListOperatorSigningKeys operation middleware
func (sh *strictHandler) ListOperatorSigningKeys(ctx *fiber.Ctx, operatorId OperatorId, params ListOperatorSigningKeysParams) error {
	var request ListOperatorSigningKeysRequestObject

	request.OperatorId = operatorId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListOperatorSigningKeys(ctx.UserContext(), request.(ListOperatorSigningKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListOperatorSigningKeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListOperatorSigningKeysResponseObject); ok {
		if err := validResponse.VisitListOperatorSigningKeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteOperatorToken operation middleware
func (sh *strictHandler) DeleteOperatorToken(ctx *fiber.Ctx, operatorId OperatorId) error {
	var request DeleteOperatorTokenRequestObject

	request.OperatorId = operatorId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOperatorToken(ctx.UserContext(), request.(DeleteOperatorTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOperatorToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteOperatorTokenResponseObject); ok {
		if err := validResponse.VisitDeleteOperatorTokenResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOperatorToken operation middleware
func (sh *strictHandler) GetOperatorToken(ctx *fiber.Ctx, operatorId OperatorId) error {
	var request GetOperatorTokenRequestObject

	request.OperatorId = operatorId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetOperatorToken(ctx.UserContext(), request.(GetOperatorTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOperatorToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetOperatorTokenResponseObject); ok {
		if err := validResponse.VisitGetOperatorTokenResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateOperatorToken operation middleware
func (sh *strictHandler) UpdateOperatorToken(ctx *fiber.Ctx, operatorId OperatorId) error {
	var request UpdateOperatorTokenRequestObject

	request.OperatorId = operatorId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateOperatorToken(ctx.UserContext(), request.(UpdateOperatorTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateOperatorToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateOperatorTokenResponseObject); ok {
		if err := validResponse.VisitUpdateOperatorTokenResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListSystems operation middleware
func (sh *strictHandler) ListSystems(ctx *fiber.Ctx) error {
	var request ListSystemsRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListSystems(ctx.UserContext(), request.(ListSystemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListSystems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListSystemsResponseObject); ok {
		if err := validResponse.VisitListSystemsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateSystem operation middleware
func (sh *strictHandler) CreateSystem(ctx *fiber.Ctx) error {
	var request CreateSystemRequestObject

	var body CreateSystemJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSystem(ctx.UserContext(), request.(CreateSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateSystemResponseObject); ok {
		if err := validResponse.VisitCreateSystemResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteSystem operation middleware
func (sh *strictHandler) DeleteSystem(ctx *fiber.Ctx, systemId SystemId) error {
	var request DeleteSystemRequestObject

	request.SystemId = systemId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSystem(ctx.UserContext(), request.(DeleteSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteSystemResponseObject); ok {
		if err := validResponse.VisitDeleteSystemResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSystem operation middleware
func (sh *strictHandler) GetSystem(ctx *fiber.Ctx, systemId SystemId) error {
	var request GetSystemRequestObject

	request.SystemId = systemId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetSystem(ctx.UserContext(), request.(GetSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetSystemResponseObject); ok {
		if err := validResponse.VisitGetSystemResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateSystem operation middleware
func (sh *strictHandler) UpdateSystem(ctx *fiber.Ctx, systemId SystemId) error {
	var request UpdateSystemRequestObject

	request.SystemId = systemId

	var body UpdateSystemJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSystem(ctx.UserContext(), request.(UpdateSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateSystemResponseObject); ok {
		if err := validResponse.VisitUpdateSystemResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteSystemOperator operation middleware
func (sh *strictHandler) DeleteSystemOperator(ctx *fiber.Ctx, systemId SystemId) error {
	var request DeleteSystemOperatorRequestObject

	request.SystemId = systemId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSystemOperator(ctx.UserContext(), request.(DeleteSystemOperatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSystemOperator")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteSystemOperatorResponseObject); ok {
		if err := validResponse.VisitDeleteSystemOperatorResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSystemOperator operation middleware
func (sh *strictHandler) GetSystemOperator(ctx *fiber.Ctx, systemId SystemId) error {
	var request GetSystemOperatorRequestObject

	request.SystemId = systemId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetSystemOperator(ctx.UserContext(), request.(GetSystemOperatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSystemOperator")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetSystemOperatorResponseObject); ok {
		if err := validResponse.VisitGetSystemOperatorResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateSystemOperator operation middleware
func (sh *strictHandler) UpdateSystemOperator(ctx *fiber.Ctx, systemId SystemId) error {
	var request UpdateSystemOperatorRequestObject

	request.SystemId = systemId

	var body UpdateSystemOperatorJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSystemOperator(ctx.UserContext(), request.(UpdateSystemOperatorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSystemOperator")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateSystemOperatorResponseObject); ok {
		if err := validResponse.VisitUpdateSystemOperatorResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListTeams operation middleware
func (sh *strictHandler) ListTeams(ctx *fiber.Ctx, params ListTeamsParams) error {
	var request ListTeamsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListTeams(ctx.UserContext(), request.(ListTeamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTeams")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListTeamsResponseObject); ok {
		if err := validResponse.VisitListTeamsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateTeam operation middleware
func (sh *strictHandler) CreateTeam(ctx *fiber.Ctx) error {
	var request CreateTeamRequestObject

	var body CreateTeamJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTeam(ctx.UserContext(), request.(CreateTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateTeamResponseObject); ok {
		if err := validResponse.VisitCreateTeamResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTeam operation middleware
func (sh *strictHandler) DeleteTeam(ctx *fiber.Ctx, teamId TeamId) error {
	var request DeleteTeamRequestObject

	request.TeamId = teamId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTeam(ctx.UserContext(), request.(DeleteTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteTeamResponseObject); ok {
		if err := validResponse.VisitDeleteTeamResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTeam operation middleware
func (sh *strictHandler) GetTeam(ctx *fiber.Ctx, teamId TeamId) error {
	var request GetTeamRequestObject

	request.TeamId = teamId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeam(ctx.UserContext(), request.(GetTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetTeamResponseObject); ok {
		if err := validResponse.VisitGetTeamResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListTeamAccounts operation middleware
func (sh *strictHandler) ListTeamAccounts(ctx *fiber.Ctx, teamId TeamId, params ListTeamAccountsParams) error {
	var request ListTeamAccountsRequestObject

	request.TeamId = teamId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListTeamAccounts(ctx.UserContext(), request.(ListTeamAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTeamAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListTeamAccountsResponseObject); ok {
		if err := validResponse.VisitListTeamAccountsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAccount operation middleware
func (sh *strictHandler) GetAccount(ctx *fiber.Ctx, teamId openapi_types.UUID, accountId openapi_types.UUID) error {
	var request GetAccountRequestObject

	request.TeamId = teamId
	request.AccountId = accountId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccount(ctx.UserContext(), request.(GetAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetAccountResponseObject); ok {
		if err := validResponse.VisitGetAccountResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListGroups operation middleware
func (sh *strictHandler) ListGroups(ctx *fiber.Ctx, teamId TeamId, accountId AccountId, params ListGroupsParams) error {
	var request ListGroupsRequestObject

	request.TeamId = teamId
	request.AccountId = accountId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListGroups(ctx.UserContext(), request.(ListGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListGroups")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListGroupsResponseObject); ok {
		if err := validResponse.VisitListGroupsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateGroup operation middleware
func (sh *strictHandler) CreateGroup(ctx *fiber.Ctx, teamId TeamId, accountId AccountId) error {
	var request CreateGroupRequestObject

	request.TeamId = teamId
	request.AccountId = accountId

	var body CreateGroupJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateGroup(ctx.UserContext(), request.(CreateGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateGroupResponseObject); ok {
		if err := validResponse.VisitCreateGroupResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteSigningKeyGroup operation middleware
func (sh *strictHandler) DeleteSigningKeyGroup(ctx *fiber.Ctx, teamId TeamId, accountId AccountId, groupId GroupId) error {
	var request DeleteSigningKeyGroupRequestObject

	request.TeamId = teamId
	request.AccountId = accountId
	request.GroupId = groupId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSigningKeyGroup(ctx.UserContext(), request.(DeleteSigningKeyGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSigningKeyGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteSigningKeyGroupResponseObject); ok {
		if err := validResponse.VisitDeleteSigningKeyGroupResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetGroup operation middleware
func (sh *strictHandler) GetGroup(ctx *fiber.Ctx, teamId TeamId, accountId AccountId, groupId GroupId) error {
	var request GetGroupRequestObject

	request.TeamId = teamId
	request.AccountId = accountId
	request.GroupId = groupId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroup(ctx.UserContext(), request.(GetGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetGroupResponseObject); ok {
		if err := validResponse.VisitGetGroupResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateGroup operation middleware
func (sh *strictHandler) UpdateGroup(ctx *fiber.Ctx, teamId TeamId, accountId AccountId, groupId GroupId) error {
	var request UpdateGroupRequestObject

	request.TeamId = teamId
	request.AccountId = accountId
	request.GroupId = groupId

	var body UpdateGroupJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateGroup(ctx.UserContext(), request.(UpdateGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateGroupResponseObject); ok {
		if err := validResponse.VisitUpdateGroupResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListUsers operation middleware
func (sh *strictHandler) ListUsers(ctx *fiber.Ctx, teamId TeamId, accountId AccountId, params ListUsersParams) error {
	var request ListUsersRequestObject

	request.TeamId = teamId
	request.AccountId = accountId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ListUsers(ctx.UserContext(), request.(ListUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ListUsersResponseObject); ok {
		if err := validResponse.VisitListUsersResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx *fiber.Ctx, teamId TeamId, accountId AccountId) error {
	var request CreateUserRequestObject

	request.TeamId = teamId
	request.AccountId = accountId

	var body CreateUserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx.UserContext(), request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTeamAccountUser operation middleware
func (sh *strictHandler) DeleteTeamAccountUser(ctx *fiber.Ctx, teamId TeamId, accountId AccountId, userId UserId) error {
	var request DeleteTeamAccountUserRequestObject

	request.TeamId = teamId
	request.AccountId = accountId
	request.UserId = userId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTeamAccountUser(ctx.UserContext(), request.(DeleteTeamAccountUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTeamAccountUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteTeamAccountUserResponseObject); ok {
		if err := validResponse.VisitDeleteTeamAccountUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx *fiber.Ctx, teamId TeamId, accountId AccountId, userId UserId) error {
	var request GetUserRequestObject

	request.TeamId = teamId
	request.AccountId = accountId
	request.UserId = userId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx.UserContext(), request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		if err := validResponse.VisitGetUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(ctx *fiber.Ctx, teamId TeamId, accountId AccountId, userId UserId) error {
	var request UpdateUserRequestObject

	request.TeamId = teamId
	request.AccountId = accountId
	request.UserId = userId

	var body UpdateUserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx.UserContext(), request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		if err := validResponse.VisitUpdateUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Version operation middleware
func (sh *strictHandler) Version(ctx *fiber.Ctx) error {
	var request VersionRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Version(ctx.UserContext(), request.(VersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Version")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(VersionResponseObject); ok {
		if err := validResponse.VisitVersionResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
