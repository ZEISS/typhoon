// Package apis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package apis

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Api_keyScopes    = "api_key.Scopes"
	BearerAuthScopes = "bearerAuth.Scopes"
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Account defines model for Account.
type Account struct {
	ContactEmail *string `json:"contactEmail,omitempty"`

	// CreatedAt Creation date and time
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Creation date and time
	DeletedAt   *time.Time          `json:"deletedAt,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `gorm:"type:uuid;default:gen_random_uuid()" json:"id,omitempty"`
	Name        string              `json:"name"`

	// UpdatedAt Creation date and time
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// PaginatedResult defines model for PaginatedResult.
type PaginatedResult struct {
	Limit   *float32       `json:"limit,omitempty"`
	Offset  *float32       `json:"offset,omitempty"`
	Results *[]interface{} `json:"results,omitempty"`
	Total   *float32       `json:"total,omitempty"`
}

// System defines model for System.
type System struct {
	// CreatedAt Creation date and time
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Creation date and time
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description A description of the system.
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `gorm:"type:uuid;default:gen_random_uuid()" json:"id,omitempty"`

	// Name Name of the system
	Name string `json:"name"`

	// UpdatedAt Creation date and time
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Systems defines model for Systems.
type Systems = []System

// Team defines model for Team.
type Team struct {
	ContactEmail *string `json:"contactEmail,omitempty"`

	// CreatedAt Creation date and time
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Creation date and time
	DeletedAt   *time.Time          `json:"deletedAt,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `gorm:"type:uuid;default:gen_random_uuid()" json:"id,omitempty"`
	Name        string              `json:"name"`

	// UpdatedAt Creation date and time
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Version defines model for Version.
type Version struct {
	Date    string `json:"date"`
	Version string `json:"version"`
}

// LimitParam defines model for limitParam.
type LimitParam = int

// OffsetParam defines model for offsetParam.
type OffsetParam = int

// TeamId defines model for teamId.
type TeamId = openapi_types.UUID

// CreateTeam defines model for CreateTeam.
type CreateTeam = Team

// ListTeamsParams defines parameters for ListTeams.
type ListTeamsParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListAccountsParams defines parameters for ListAccounts.
type ListAccountsParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = Team

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"pbanNX+7eeS3W3XC+38AAAD//5+cDRmEHAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
