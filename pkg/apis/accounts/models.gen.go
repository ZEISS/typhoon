// Package accounts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package accounts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

const (
	ApiKeyScopes     = "apiKey.Scopes"
	BearerAuthScopes = "bearerAuth.Scopes"
)

// JWT The JWT token.
type JWT = string

// PubKey defines model for pubKey.
type PubKey = string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xUzW7bPBB8FWK/76hIys8h0KkGArROgSKAXaRA4gMtrSw2FMmSlBPD0LsXS0qWXfvQ",
	"Q28WvTs73JnhHkrdGq1QeQfFHgy3vEWPNn5166+4o18VutIK44VWUMCyQWa6tRQle8Md0zXzDTJelrpT",
	"PoUEBFUZ7htIQPEW6StiJWDxVycsVlB422ECrmyw5TTE7wxVOm+F2kDf9+Ofgczj8/Iyk8fnJfP6DRVN",
	"rrVtuYcCfr57SM4gE3BYdlb43YKQMSBzI4ZrBt4N8grtxPzH1expfhXJD3hDR5/AGrlFO+t8Q/2BLhXE",
	"46mh8d7EGwlVayottfK89PQTWy4kscQ1d15w9emNey4l/xCYVridqCzGCvagUUoicLqP/9hceaurrqSD",
	"V/WqlpMyzKHdomXG6q2o0AXVDttzrNb2WEjHhGLfZssFu0nz9FVBAlKUqByGVVWovKgFWihgZnjZ4NVN",
	"mk9c4xn1Ek3XtS23u0Gyf0GIliu8xAC5M43Wis0G3EXEnT3NIYEtWhe3c53mkY02qLgRUMBteh1Ik1mD",
	"GbJxWLaPlu3pdIP+3Hyf0R/TYyQtuU9odaC+EVtUR2Eh2tqgDVXzKqIMtJd068BlCuHLHv63WJO02RTV",
	"bCrJhmD1K4qWM1q56OqbPB99hspHnxspyjA5o3iMhg3huzRlSF9G0QvmPb3/7PzetNzb/O58V2NtUJa9",
	"c8eU9qzVFVmoora7v2+rdaeqaP6ad/KCNN8VfhgsPVYMrdU2Rv/gQVLugmpkKb6hrY+DYdUfPxpBj+PI",
	"v6z6ZHpAXlakQjR11O6U1QNuUWrT4sH6kEBn5fBAFFkmdcllo50v7vP7nFTKttdAM06Rng4Z/xPo0LM6",
	"XObCo+mQcYvBoQ1Kw1BVRgvlXToF+AtKc2H0afe4xUsA4w77Vf87AAD//zsvcMdoBgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
