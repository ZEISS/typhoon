// Package accounts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package accounts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

const (
	ApiKeyScopes     = "apiKey.Scopes"
	BearerAuthScopes = "bearerAuth.Scopes"
)

// JWT The JWT token.
type JWT = string

// PubKey defines model for pubKey.
type PubKey = string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xVXW/bNhT9KwS3R0VS4iAJ9DQvCVq3aZrVzmo48QMjXVtcJJIjr9wYgf/7cEnZshe1",
	"GIa+6eN+HN57zuErz3VttAKFjmev3AgrakCw4a15+ghreirA5VYalFrxjE9KYKZ5qmTOnmHN9IJhCUzk",
	"uW4UxjzikqKMwJJHXIka6C3UiriFvxtpoeAZ2gYi7vISakFNcG0o0qGVask3m832pwfz4eukH8mHrxOG",
	"+hkUdV5oWwvkGf/rG/LoTcmIO8gbK3E9psrgKwsj22N63CWIAmyHfHo0vBsdBfBtvTZjE/EnEBbssMGS",
	"8j1cCgifu4QS0YQTSbXQFJprhSJHeoRayIpQwpNwKIX67VmgqCrxIiEuYNVBGW8j2JWGqiIAh/P4hY0U",
	"Wl00OX14VI9q0m2GObArsMxYvZIFOL+13fQcW2i7v0jHpGK3w8mYncRp/Kh4xCuZg3LgR1WAQrmQYHnG",
	"h0bkJRydxGmHNXyjXILpmroWdt2u7GcAouFKrMCXXJtSa8WGbd1xqDu8G/GIr8C6MJ3jOA1otAEljOQZ",
	"H8THHjSR1ZMh2TZL6G0J2Ec66RiowmipkEnHGgcFQ80QHHrA25/ct7KCEkcFz/g7wPdQGS8DZ7RygYEn",
	"afq2zbjJwblFU/m6YdcL0VQ9iO4VvBjIEQoG1mobmL43cukIpwgI99ChWDqePXAPak5Z3flfg2Q3353D",
	"O8D99TCiNqlParVb3VKuQO2ZRdw3knZtE9q630VnQg+v/FcLC6J20llV0oUkrbFs5v0zJZ2BwqBzU8nc",
	"d07IHraC9ebT16V1n4Ssx4v38PzDt+fmUWsfHsKlV8WlJklW/eaVe5HkIYSFXJoRvIjaeHLX4uVILCFj",
	"F2enaRqxunF4ZGElKlkIhIgZK1cCgf/ISiN+PRHL70BorAWFjCK2Xr7z0w7H+PZs9sfg/Mv17PPo/vPl",
	"+P3t1d1gen59/vvZ7NPsbHp/Mz05/fjnyeDm05fx7GZ6NTgb/hAToRqkp/2gPAD2TTimNLJaF2Q1RUwq",
	"OP1vOQvdqJDwf2VD/Ba9O97KpmUAKWfvavGs3b8YHuabqLtmHubE1WB9geGHqK5gBZU2NewMkke8sVV7",
	"jWRJUulcVKV2mF2kFylxOVkdc+pxWOludxP8u9AuZ747TM9EHTBhwROihMrsjMPFnc1753jb+jB7O8W+",
	"AtsZbuabfwIAAP//zWQIqY4IAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
