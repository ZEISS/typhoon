// Package accounts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package accounts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

const (
	ApiKeyScopes     = "apiKey.Scopes"
	BearerAuthScopes = "bearerAuth.Scopes"
)

// JWT The JWT token.
type JWT = string

// IfNoneMatch defines model for ifNoneMatch.
type IfNoneMatch = string

// PubKey defines model for pubKey.
type PubKey = string

// GetAccountTokenParams defines parameters for GetAccountToken.
type GetAccountTokenParams struct {
	// IfNoneMatch The ETag of the token.
	IfNoneMatch *IfNoneMatch `json:"If-None-Match,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVUVPjNhD+K5ptHx3HEAYYPzUF5i53wNFL6DFAHoS9jlVsSZXWOTKM/3tHsh0nxXfX",
	"6bRvsaLd/fTtft++QqJKrSRKshC/guaGl0ho/JfIrpXEK05J7j5TtIkRmoSSEMMiR3ax4CumMkY5MlLP",
	"KEMIAF94qQuEGObXx/e/TU4+X9x/mt1+Opu/vz6/mdydXJz8enx/dX98d3t5d3j08ffDyeXV5/n95d35",
	"5HgKAQiXPkeeooEAJC9drlk2cmBGDZoAbJJjyR0s2mh3wZIRcgV1HYCunj7iZhiyrp4KkbBn3HTAeZKo",
	"SlLYVdac8r5umysAg39WwmAKMZkKvweg7v70JH74shhG8uHLoictU6bkBDH88ZUgGHiTxaQygjZzlxl9",
	"Zq5F+8xBxu5G05vZqAHf5msj6gCekBs004p8Zz1cd6E57gNyIt28SMhMuauJksQTcj+x5KJwKPGJWxJc",
	"/vLMiRcFfxEYprjuocy7G+xcYVE4APt8/MRmkoxKq8QdPMpHueg7wyyaNRqmjVqLFK3v2pY9yzJldhtp",
	"mZDserqYs8MwCh8lBFCIBKVFT1WKkkQm0EAMU82THEeHYdRjbc5crINpq7LkZtO27L8A5MgV5PWxyDc6",
	"V0qyaZt33uSd3swggDUa27BzEEYNGqVRci0ghkl44EG7YfXDMO6Kjd3XCmlo6IRlKFOthCQmLKsspowU",
	"I7TkAXd/gi9luAucpRDDO6T3WGgvA6uVtM0EHkbR2zLzKkFrs6rweZteZ7wqBhDdSnzRmBCmDI1Rppn0",
	"HcqFdTh5g3AHHfGVhfgBPKili+rf/9pItv4mD++QdtvD3Gg79Qklt61biTXKHbMIhyhp27ZwXfe96M3z",
	"4RV+Npi50R73Fjvur4xbY6mDH97cteF6OdwCJ0uU1NiCLkTigY6dm3T69l41VKo1q7FzKq/1fbqmb2mC",
	"oHUbD+HMi+hMOQUXw16XeE0lzRXWxO7vipK/jPgKY3Z6fBRFASsrSyODa16IlBMGTBux5oQ/sH63kb4B",
	"oTIGJf1PO+s726AOYBIdDYPyANhXbplUxEqVOmdKQyeao38Wk6lKNgH/VmVODnywx53K2glwQtvZRH7I",
	"d/fIw9INc7eVHpZuVhunbASxj+oc11goXeLWTyGAyhTt1onH40IlvMiVpfg0Oo3cLI/XB14w+5lutovj",
	"74m2McvtYwYYtci4QT8QORZ66zM27LeCN5q3pfejOxaHEnQc1sv6rwAAAP//aoVdonUJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
